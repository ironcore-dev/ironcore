//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by defaulter-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/onmetal/onmetal-api/api/compute/v1alpha1"
	ipamv1alpha1 "github.com/onmetal/onmetal-api/onmetal-apiserver/internal/apis/ipam/v1alpha1"
	networkingv1alpha1 "github.com/onmetal/onmetal-api/onmetal-apiserver/internal/apis/networking/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&v1alpha1.Machine{}, func(obj interface{}) { SetObjectDefaults_Machine(obj.(*v1alpha1.Machine)) })
	scheme.AddTypeDefaultingFunc(&v1alpha1.MachineList{}, func(obj interface{}) { SetObjectDefaults_MachineList(obj.(*v1alpha1.MachineList)) })
	return nil
}

func SetObjectDefaults_Machine(in *v1alpha1.Machine) {
	for i := range in.Spec.NetworkInterfaces {
		a := &in.Spec.NetworkInterfaces[i]
		if a.NetworkInterfaceSource.Ephemeral != nil {
			if a.NetworkInterfaceSource.Ephemeral.NetworkInterfaceTemplate != nil {
				networkingv1alpha1.SetDefaults_NetworkInterfaceSpec(&a.NetworkInterfaceSource.Ephemeral.NetworkInterfaceTemplate.Spec)
				for j := range a.NetworkInterfaceSource.Ephemeral.NetworkInterfaceTemplate.Spec.IPs {
					b := &a.NetworkInterfaceSource.Ephemeral.NetworkInterfaceTemplate.Spec.IPs[j]
					if b.Ephemeral != nil {
						if b.Ephemeral.PrefixTemplate != nil {
							ipamv1alpha1.SetDefaults_PrefixSpec(&b.Ephemeral.PrefixTemplate.Spec)
						}
					}
				}
			}
		}
	}
	SetDefaults_MachineStatus(&in.Status)
	for i := range in.Status.NetworkInterfaces {
		a := &in.Status.NetworkInterfaces[i]
		SetDefaults_NetworkInterfaceStatus(a)
	}
	for i := range in.Status.Volumes {
		a := &in.Status.Volumes[i]
		SetDefaults_VolumeStatus(a)
	}
}

func SetObjectDefaults_MachineList(in *v1alpha1.MachineList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Machine(a)
	}
}
