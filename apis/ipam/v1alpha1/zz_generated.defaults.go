//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
 * Copyright (c) 2021 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by defaulter-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&Prefix{}, func(obj interface{}) { SetObjectDefaults_Prefix(obj.(*Prefix)) })
	scheme.AddTypeDefaultingFunc(&PrefixAllocation{}, func(obj interface{}) { SetObjectDefaults_PrefixAllocation(obj.(*PrefixAllocation)) })
	scheme.AddTypeDefaultingFunc(&PrefixAllocationList{}, func(obj interface{}) { SetObjectDefaults_PrefixAllocationList(obj.(*PrefixAllocationList)) })
	scheme.AddTypeDefaultingFunc(&PrefixList{}, func(obj interface{}) { SetObjectDefaults_PrefixList(obj.(*PrefixList)) })
	return nil
}

func SetObjectDefaults_Prefix(in *Prefix) {
	SetDefaults_PrefixSpec(&in.Spec)
}

func SetObjectDefaults_PrefixAllocation(in *PrefixAllocation) {
	SetDefaults_PrefixAllocationSpec(&in.Spec)
}

func SetObjectDefaults_PrefixAllocationList(in *PrefixAllocationList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_PrefixAllocation(a)
	}
}

func SetObjectDefaults_PrefixList(in *PrefixList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Prefix(a)
	}
}
