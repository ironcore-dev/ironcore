// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/api/storage/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BucketStatusApplyConfiguration represents an declarative configuration of the BucketStatus type for use
// with apply.
type BucketStatusApplyConfiguration struct {
	State                   *v1alpha1.BucketState               `json:"state,omitempty"`
	LastStateTransitionTime *v1.Time                            `json:"lastStateTransitionTime,omitempty"`
	Access                  *BucketAccessApplyConfiguration     `json:"access,omitempty"`
	Conditions              []BucketConditionApplyConfiguration `json:"conditions,omitempty"`
}

// BucketStatusApplyConfiguration constructs an declarative configuration of the BucketStatus type for use with
// apply.
func BucketStatus() *BucketStatusApplyConfiguration {
	return &BucketStatusApplyConfiguration{}
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *BucketStatusApplyConfiguration) WithState(value v1alpha1.BucketState) *BucketStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithLastStateTransitionTime sets the LastStateTransitionTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastStateTransitionTime field is set to the value of the last call.
func (b *BucketStatusApplyConfiguration) WithLastStateTransitionTime(value v1.Time) *BucketStatusApplyConfiguration {
	b.LastStateTransitionTime = &value
	return b
}

// WithAccess sets the Access field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Access field is set to the value of the last call.
func (b *BucketStatusApplyConfiguration) WithAccess(value *BucketAccessApplyConfiguration) *BucketStatusApplyConfiguration {
	b.Access = value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *BucketStatusApplyConfiguration) WithConditions(values ...*BucketConditionApplyConfiguration) *BucketStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
