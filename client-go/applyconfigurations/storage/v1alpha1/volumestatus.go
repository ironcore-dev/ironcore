/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/onmetal/onmetal-api/api/storage/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VolumeStatusApplyConfiguration represents an declarative configuration of the VolumeStatus type for use
// with apply.
type VolumeStatusApplyConfiguration struct {
	State                   *v1alpha1.VolumeState               `json:"state,omitempty"`
	LastStateTransitionTime *v1.Time                            `json:"lastStateTransitionTime,omitempty"`
	Phase                   *v1alpha1.VolumePhase               `json:"phase,omitempty"`
	LastPhaseTransitionTime *v1.Time                            `json:"lastPhaseTransitionTime,omitempty"`
	Access                  *VolumeAccessApplyConfiguration     `json:"access,omitempty"`
	Conditions              []VolumeConditionApplyConfiguration `json:"conditions,omitempty"`
}

// VolumeStatusApplyConfiguration constructs an declarative configuration of the VolumeStatus type for use with
// apply.
func VolumeStatus() *VolumeStatusApplyConfiguration {
	return &VolumeStatusApplyConfiguration{}
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithState(value v1alpha1.VolumeState) *VolumeStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithLastStateTransitionTime sets the LastStateTransitionTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastStateTransitionTime field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithLastStateTransitionTime(value v1.Time) *VolumeStatusApplyConfiguration {
	b.LastStateTransitionTime = &value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithPhase(value v1alpha1.VolumePhase) *VolumeStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithLastPhaseTransitionTime sets the LastPhaseTransitionTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastPhaseTransitionTime field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithLastPhaseTransitionTime(value v1.Time) *VolumeStatusApplyConfiguration {
	b.LastPhaseTransitionTime = &value
	return b
}

// WithAccess sets the Access field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Access field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithAccess(value *VolumeAccessApplyConfiguration) *VolumeStatusApplyConfiguration {
	b.Access = value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *VolumeStatusApplyConfiguration) WithConditions(values ...*VolumeConditionApplyConfiguration) *VolumeStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
