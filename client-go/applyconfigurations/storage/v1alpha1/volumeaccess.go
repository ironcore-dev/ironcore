// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// VolumeAccessApplyConfiguration represents an declarative configuration of the VolumeAccess type for use
// with apply.
type VolumeAccessApplyConfiguration struct {
	SecretRef        *v1.LocalObjectReference `json:"secretRef,omitempty"`
	Driver           *string                  `json:"driver,omitempty"`
	Handle           *string                  `json:"handle,omitempty"`
	VolumeAttributes map[string]string        `json:"volumeAttributes,omitempty"`
}

// VolumeAccessApplyConfiguration constructs an declarative configuration of the VolumeAccess type for use with
// apply.
func VolumeAccess() *VolumeAccessApplyConfiguration {
	return &VolumeAccessApplyConfiguration{}
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *VolumeAccessApplyConfiguration) WithSecretRef(value v1.LocalObjectReference) *VolumeAccessApplyConfiguration {
	b.SecretRef = &value
	return b
}

// WithDriver sets the Driver field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Driver field is set to the value of the last call.
func (b *VolumeAccessApplyConfiguration) WithDriver(value string) *VolumeAccessApplyConfiguration {
	b.Driver = &value
	return b
}

// WithHandle sets the Handle field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Handle field is set to the value of the last call.
func (b *VolumeAccessApplyConfiguration) WithHandle(value string) *VolumeAccessApplyConfiguration {
	b.Handle = &value
	return b
}

// WithVolumeAttributes puts the entries into the VolumeAttributes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the VolumeAttributes field,
// overwriting an existing map entries in VolumeAttributes field with the same key.
func (b *VolumeAccessApplyConfiguration) WithVolumeAttributes(entries map[string]string) *VolumeAccessApplyConfiguration {
	if b.VolumeAttributes == nil && len(entries) > 0 {
		b.VolumeAttributes = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.VolumeAttributes[k] = v
	}
	return b
}
