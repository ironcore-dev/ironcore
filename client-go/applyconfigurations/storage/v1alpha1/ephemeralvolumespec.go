// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	commonv1alpha1 "github.com/ironcore-dev/ironcore/api/common/v1alpha1"
	corev1alpha1 "github.com/ironcore-dev/ironcore/api/core/v1alpha1"
	storagev1alpha1 "github.com/ironcore-dev/ironcore/api/storage/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// EphemeralVolumeSpecApplyConfiguration represents an declarative configuration of the EphemeralVolumeSpec type for use
// with apply.
type EphemeralVolumeSpecApplyConfiguration struct {
	VolumeSpecApplyConfiguration `json:",inline"`
	ReclaimPolicy                *storagev1alpha1.ReclaimPolicy `json:"reclaimpolicy,omitempty"`
}

// EphemeralVolumeSpecApplyConfiguration constructs an declarative configuration of the EphemeralVolumeSpec type for use with
// apply.
func EphemeralVolumeSpec() *EphemeralVolumeSpecApplyConfiguration {
	return &EphemeralVolumeSpecApplyConfiguration{}
}

// WithVolumeClassRef sets the VolumeClassRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeClassRef field is set to the value of the last call.
func (b *EphemeralVolumeSpecApplyConfiguration) WithVolumeClassRef(value v1.LocalObjectReference) *EphemeralVolumeSpecApplyConfiguration {
	b.VolumeClassRef = &value
	return b
}

// WithVolumePoolSelector puts the entries into the VolumePoolSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the VolumePoolSelector field,
// overwriting an existing map entries in VolumePoolSelector field with the same key.
func (b *EphemeralVolumeSpecApplyConfiguration) WithVolumePoolSelector(entries map[string]string) *EphemeralVolumeSpecApplyConfiguration {
	if b.VolumePoolSelector == nil && len(entries) > 0 {
		b.VolumePoolSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.VolumePoolSelector[k] = v
	}
	return b
}

// WithVolumePoolRef sets the VolumePoolRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumePoolRef field is set to the value of the last call.
func (b *EphemeralVolumeSpecApplyConfiguration) WithVolumePoolRef(value v1.LocalObjectReference) *EphemeralVolumeSpecApplyConfiguration {
	b.VolumePoolRef = &value
	return b
}

// WithClaimRef sets the ClaimRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClaimRef field is set to the value of the last call.
func (b *EphemeralVolumeSpecApplyConfiguration) WithClaimRef(value commonv1alpha1.LocalUIDReference) *EphemeralVolumeSpecApplyConfiguration {
	b.ClaimRef = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *EphemeralVolumeSpecApplyConfiguration) WithResources(value corev1alpha1.ResourceList) *EphemeralVolumeSpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *EphemeralVolumeSpecApplyConfiguration) WithImage(value string) *EphemeralVolumeSpecApplyConfiguration {
	b.Image = &value
	return b
}

// WithImagePullSecretRef sets the ImagePullSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImagePullSecretRef field is set to the value of the last call.
func (b *EphemeralVolumeSpecApplyConfiguration) WithImagePullSecretRef(value v1.LocalObjectReference) *EphemeralVolumeSpecApplyConfiguration {
	b.ImagePullSecretRef = &value
	return b
}

// WithUnclaimable sets the Unclaimable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Unclaimable field is set to the value of the last call.
func (b *EphemeralVolumeSpecApplyConfiguration) WithUnclaimable(value bool) *EphemeralVolumeSpecApplyConfiguration {
	b.Unclaimable = &value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *EphemeralVolumeSpecApplyConfiguration) WithTolerations(values ...commonv1alpha1.Toleration) *EphemeralVolumeSpecApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithEncryption sets the Encryption field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Encryption field is set to the value of the last call.
func (b *EphemeralVolumeSpecApplyConfiguration) WithEncryption(value *VolumeEncryptionApplyConfiguration) *EphemeralVolumeSpecApplyConfiguration {
	b.Encryption = value
	return b
}

// WithReclaimPolicy sets the ReclaimPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReclaimPolicy field is set to the value of the last call.
func (b *EphemeralVolumeSpecApplyConfiguration) WithReclaimPolicy(value storagev1alpha1.ReclaimPolicy) *EphemeralVolumeSpecApplyConfiguration {
	b.ReclaimPolicy = &value
	return b
}
