/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/onmetal/onmetal-api/api/networking/v1alpha1"
	metav1 "github.com/onmetal/onmetal-api/client-go/applyconfigurations/meta/v1"
	v1 "k8s.io/api/core/v1"
)

// LoadBalancerSpecApplyConfiguration represents an declarative configuration of the LoadBalancerSpec type for use
// with apply.
type LoadBalancerSpecApplyConfiguration struct {
	Type                     *v1alpha1.LoadBalancerType              `json:"type,omitempty"`
	IPFamilies               []v1.IPFamily                           `json:"ipFamilies,omitempty"`
	IPs                      []IPSourceApplyConfiguration            `json:"ips,omitempty"`
	NetworkRef               *v1.LocalObjectReference                `json:"networkRef,omitempty"`
	NetworkInterfaceSelector *metav1.LabelSelectorApplyConfiguration `json:"networkInterfaceSelector,omitempty"`
	Ports                    []LoadBalancerPortApplyConfiguration    `json:"ports,omitempty"`
}

// LoadBalancerSpecApplyConfiguration constructs an declarative configuration of the LoadBalancerSpec type for use with
// apply.
func LoadBalancerSpec() *LoadBalancerSpecApplyConfiguration {
	return &LoadBalancerSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *LoadBalancerSpecApplyConfiguration) WithType(value v1alpha1.LoadBalancerType) *LoadBalancerSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithIPFamilies adds the given value to the IPFamilies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPFamilies field.
func (b *LoadBalancerSpecApplyConfiguration) WithIPFamilies(values ...v1.IPFamily) *LoadBalancerSpecApplyConfiguration {
	for i := range values {
		b.IPFamilies = append(b.IPFamilies, values[i])
	}
	return b
}

// WithIPs adds the given value to the IPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPs field.
func (b *LoadBalancerSpecApplyConfiguration) WithIPs(values ...*IPSourceApplyConfiguration) *LoadBalancerSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIPs")
		}
		b.IPs = append(b.IPs, *values[i])
	}
	return b
}

// WithNetworkRef sets the NetworkRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkRef field is set to the value of the last call.
func (b *LoadBalancerSpecApplyConfiguration) WithNetworkRef(value v1.LocalObjectReference) *LoadBalancerSpecApplyConfiguration {
	b.NetworkRef = &value
	return b
}

// WithNetworkInterfaceSelector sets the NetworkInterfaceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkInterfaceSelector field is set to the value of the last call.
func (b *LoadBalancerSpecApplyConfiguration) WithNetworkInterfaceSelector(value *metav1.LabelSelectorApplyConfiguration) *LoadBalancerSpecApplyConfiguration {
	b.NetworkInterfaceSelector = value
	return b
}

// WithPorts adds the given value to the Ports field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ports field.
func (b *LoadBalancerSpecApplyConfiguration) WithPorts(values ...*LoadBalancerPortApplyConfiguration) *LoadBalancerSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPorts")
		}
		b.Ports = append(b.Ports, *values[i])
	}
	return b
}
