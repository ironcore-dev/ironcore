/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/onmetal/onmetal-api/api/common/v1alpha1"
)

// IPSourceApplyConfiguration represents an declarative configuration of the IPSource type for use
// with apply.
type IPSourceApplyConfiguration struct {
	Value     *v1alpha1.IP                             `json:"value,omitempty"`
	Ephemeral *EphemeralPrefixSourceApplyConfiguration `json:"ephemeral,omitempty"`
}

// IPSourceApplyConfiguration constructs an declarative configuration of the IPSource type for use with
// apply.
func IPSource() *IPSourceApplyConfiguration {
	return &IPSourceApplyConfiguration{}
}

// WithValue sets the Value field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Value field is set to the value of the last call.
func (b *IPSourceApplyConfiguration) WithValue(value v1alpha1.IP) *IPSourceApplyConfiguration {
	b.Value = &value
	return b
}

// WithEphemeral sets the Ephemeral field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ephemeral field is set to the value of the last call.
func (b *IPSourceApplyConfiguration) WithEphemeral(value *EphemeralPrefixSourceApplyConfiguration) *IPSourceApplyConfiguration {
	b.Ephemeral = value
	return b
}
