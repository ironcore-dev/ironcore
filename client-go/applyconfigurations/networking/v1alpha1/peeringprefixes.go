// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/api/common/v1alpha1"
)

// PeeringPrefixesApplyConfiguration represents an declarative configuration of the PeeringPrefixes type for use
// with apply.
type PeeringPrefixesApplyConfiguration struct {
	Name      *string                             `json:"name,omitempty"`
	Prefix    *v1alpha1.IPPrefix                  `json:"prefix,omitempty"`
	PrefixRef *PeeringPrefixRefApplyConfiguration `json:"prefixRef,omitempty"`
}

// PeeringPrefixesApplyConfiguration constructs an declarative configuration of the PeeringPrefixes type for use with
// apply.
func PeeringPrefixes() *PeeringPrefixesApplyConfiguration {
	return &PeeringPrefixesApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *PeeringPrefixesApplyConfiguration) WithName(value string) *PeeringPrefixesApplyConfiguration {
	b.Name = &value
	return b
}

// WithPrefix sets the Prefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Prefix field is set to the value of the last call.
func (b *PeeringPrefixesApplyConfiguration) WithPrefix(value v1alpha1.IPPrefix) *PeeringPrefixesApplyConfiguration {
	b.Prefix = &value
	return b
}

// WithPrefixRef sets the PrefixRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrefixRef field is set to the value of the last call.
func (b *PeeringPrefixesApplyConfiguration) WithPrefixRef(value *PeeringPrefixRefApplyConfiguration) *PeeringPrefixesApplyConfiguration {
	b.PrefixRef = value
	return b
}
