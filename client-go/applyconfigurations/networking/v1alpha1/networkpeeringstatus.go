// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	networkingv1alpha1 "github.com/ironcore-dev/ironcore/api/networking/v1alpha1"
)

// NetworkPeeringStatusApplyConfiguration represents a declarative configuration of the NetworkPeeringStatus type for use
// with apply.
type NetworkPeeringStatusApplyConfiguration struct {
	Name     *string                                 `json:"name,omitempty"`
	State    *networkingv1alpha1.NetworkPeeringState `json:"state,omitempty"`
	Prefixes []PeeringPrefixStatusApplyConfiguration `json:"prefixes,omitempty"`
}

// NetworkPeeringStatusApplyConfiguration constructs a declarative configuration of the NetworkPeeringStatus type for use with
// apply.
func NetworkPeeringStatus() *NetworkPeeringStatusApplyConfiguration {
	return &NetworkPeeringStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *NetworkPeeringStatusApplyConfiguration) WithName(value string) *NetworkPeeringStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *NetworkPeeringStatusApplyConfiguration) WithState(value networkingv1alpha1.NetworkPeeringState) *NetworkPeeringStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithPrefixes adds the given value to the Prefixes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Prefixes field.
func (b *NetworkPeeringStatusApplyConfiguration) WithPrefixes(values ...*PeeringPrefixStatusApplyConfiguration) *NetworkPeeringStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPrefixes")
		}
		b.Prefixes = append(b.Prefixes, *values[i])
	}
	return b
}
