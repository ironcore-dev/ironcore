/*
 * Copyright (c) 2022 by the IronCore authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/api/networking/v1alpha1"
	commonv1alpha1 "github.com/ironcore-dev/ironcore/client-go/applyconfigurations/common/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// VirtualIPSpecApplyConfiguration represents an declarative configuration of the VirtualIPSpec type for use
// with apply.
type VirtualIPSpecApplyConfiguration struct {
	Type      *v1alpha1.VirtualIPType                             `json:"type,omitempty"`
	IPFamily  *v1.IPFamily                                        `json:"ipFamily,omitempty"`
	TargetRef *commonv1alpha1.LocalUIDReferenceApplyConfiguration `json:"targetRef,omitempty"`
}

// VirtualIPSpecApplyConfiguration constructs an declarative configuration of the VirtualIPSpec type for use with
// apply.
func VirtualIPSpec() *VirtualIPSpecApplyConfiguration {
	return &VirtualIPSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *VirtualIPSpecApplyConfiguration) WithType(value v1alpha1.VirtualIPType) *VirtualIPSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithIPFamily sets the IPFamily field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPFamily field is set to the value of the last call.
func (b *VirtualIPSpecApplyConfiguration) WithIPFamily(value v1.IPFamily) *VirtualIPSpecApplyConfiguration {
	b.IPFamily = &value
	return b
}

// WithTargetRef sets the TargetRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetRef field is set to the value of the last call.
func (b *VirtualIPSpecApplyConfiguration) WithTargetRef(value *commonv1alpha1.LocalUIDReferenceApplyConfiguration) *VirtualIPSpecApplyConfiguration {
	b.TargetRef = value
	return b
}
