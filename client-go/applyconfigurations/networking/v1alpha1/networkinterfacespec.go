// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/client-go/applyconfigurations/common/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// NetworkInterfaceSpecApplyConfiguration represents an declarative configuration of the NetworkInterfaceSpec type for use
// with apply.
type NetworkInterfaceSpecApplyConfiguration struct {
	ProviderID *string                                       `json:"providerID,omitempty"`
	NetworkRef *v1.LocalObjectReference                      `json:"networkRef,omitempty"`
	MachineRef *v1alpha1.LocalUIDReferenceApplyConfiguration `json:"machineRef,omitempty"`
	IPFamilies []v1.IPFamily                                 `json:"ipFamilies,omitempty"`
	IPs        []IPSourceApplyConfiguration                  `json:"ips,omitempty"`
	Prefixes   []PrefixSourceApplyConfiguration              `json:"prefixes,omitempty"`
	VirtualIP  *VirtualIPSourceApplyConfiguration            `json:"virtualIP,omitempty"`
	Attributes map[string]string                             `json:"attributes,omitempty"`
}

// NetworkInterfaceSpecApplyConfiguration constructs an declarative configuration of the NetworkInterfaceSpec type for use with
// apply.
func NetworkInterfaceSpec() *NetworkInterfaceSpecApplyConfiguration {
	return &NetworkInterfaceSpecApplyConfiguration{}
}

// WithProviderID sets the ProviderID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProviderID field is set to the value of the last call.
func (b *NetworkInterfaceSpecApplyConfiguration) WithProviderID(value string) *NetworkInterfaceSpecApplyConfiguration {
	b.ProviderID = &value
	return b
}

// WithNetworkRef sets the NetworkRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkRef field is set to the value of the last call.
func (b *NetworkInterfaceSpecApplyConfiguration) WithNetworkRef(value v1.LocalObjectReference) *NetworkInterfaceSpecApplyConfiguration {
	b.NetworkRef = &value
	return b
}

// WithMachineRef sets the MachineRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MachineRef field is set to the value of the last call.
func (b *NetworkInterfaceSpecApplyConfiguration) WithMachineRef(value *v1alpha1.LocalUIDReferenceApplyConfiguration) *NetworkInterfaceSpecApplyConfiguration {
	b.MachineRef = value
	return b
}

// WithIPFamilies adds the given value to the IPFamilies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPFamilies field.
func (b *NetworkInterfaceSpecApplyConfiguration) WithIPFamilies(values ...v1.IPFamily) *NetworkInterfaceSpecApplyConfiguration {
	for i := range values {
		b.IPFamilies = append(b.IPFamilies, values[i])
	}
	return b
}

// WithIPs adds the given value to the IPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPs field.
func (b *NetworkInterfaceSpecApplyConfiguration) WithIPs(values ...*IPSourceApplyConfiguration) *NetworkInterfaceSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIPs")
		}
		b.IPs = append(b.IPs, *values[i])
	}
	return b
}

// WithPrefixes adds the given value to the Prefixes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Prefixes field.
func (b *NetworkInterfaceSpecApplyConfiguration) WithPrefixes(values ...*PrefixSourceApplyConfiguration) *NetworkInterfaceSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPrefixes")
		}
		b.Prefixes = append(b.Prefixes, *values[i])
	}
	return b
}

// WithVirtualIP sets the VirtualIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VirtualIP field is set to the value of the last call.
func (b *NetworkInterfaceSpecApplyConfiguration) WithVirtualIP(value *VirtualIPSourceApplyConfiguration) *NetworkInterfaceSpecApplyConfiguration {
	b.VirtualIP = value
	return b
}

// WithAttributes puts the entries into the Attributes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Attributes field,
// overwriting an existing map entries in Attributes field with the same key.
func (b *NetworkInterfaceSpecApplyConfiguration) WithAttributes(entries map[string]string) *NetworkInterfaceSpecApplyConfiguration {
	if b.Attributes == nil && len(entries) > 0 {
		b.Attributes = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Attributes[k] = v
	}
	return b
}
