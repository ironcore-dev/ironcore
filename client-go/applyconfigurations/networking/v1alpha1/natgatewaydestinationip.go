/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/onmetal/onmetal-api/api/common/v1alpha1"
)

// NATGatewayDestinationIPApplyConfiguration represents an declarative configuration of the NATGatewayDestinationIP type for use
// with apply.
type NATGatewayDestinationIPApplyConfiguration struct {
	IP      *v1alpha1.IP `json:"ip,omitempty"`
	Port    *int32       `json:"port,omitempty"`
	EndPort *int32       `json:"endPort,omitempty"`
}

// NATGatewayDestinationIPApplyConfiguration constructs an declarative configuration of the NATGatewayDestinationIP type for use with
// apply.
func NATGatewayDestinationIP() *NATGatewayDestinationIPApplyConfiguration {
	return &NATGatewayDestinationIPApplyConfiguration{}
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *NATGatewayDestinationIPApplyConfiguration) WithIP(value v1alpha1.IP) *NATGatewayDestinationIPApplyConfiguration {
	b.IP = &value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *NATGatewayDestinationIPApplyConfiguration) WithPort(value int32) *NATGatewayDestinationIPApplyConfiguration {
	b.Port = &value
	return b
}

// WithEndPort sets the EndPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndPort field is set to the value of the last call.
func (b *NATGatewayDestinationIPApplyConfiguration) WithEndPort(value int32) *NATGatewayDestinationIPApplyConfiguration {
	b.EndPort = &value
	return b
}
