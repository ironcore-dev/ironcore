/*
 * Copyright (c) 2022 by the IronCore authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/api/common/v1alpha1"
	metav1 "github.com/ironcore-dev/ironcore/client-go/applyconfigurations/meta/v1"
	v1 "k8s.io/api/core/v1"
)

// PrefixSpecApplyConfiguration represents an declarative configuration of the PrefixSpec type for use
// with apply.
type PrefixSpecApplyConfiguration struct {
	IPFamily       *v1.IPFamily                            `json:"ipFamily,omitempty"`
	Prefix         *v1alpha1.IPPrefix                      `json:"prefix,omitempty"`
	PrefixLength   *int32                                  `json:"prefixLength,omitempty"`
	ParentRef      *v1.LocalObjectReference                `json:"parentRef,omitempty"`
	ParentSelector *metav1.LabelSelectorApplyConfiguration `json:"parentSelector,omitempty"`
}

// PrefixSpecApplyConfiguration constructs an declarative configuration of the PrefixSpec type for use with
// apply.
func PrefixSpec() *PrefixSpecApplyConfiguration {
	return &PrefixSpecApplyConfiguration{}
}

// WithIPFamily sets the IPFamily field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPFamily field is set to the value of the last call.
func (b *PrefixSpecApplyConfiguration) WithIPFamily(value v1.IPFamily) *PrefixSpecApplyConfiguration {
	b.IPFamily = &value
	return b
}

// WithPrefix sets the Prefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Prefix field is set to the value of the last call.
func (b *PrefixSpecApplyConfiguration) WithPrefix(value v1alpha1.IPPrefix) *PrefixSpecApplyConfiguration {
	b.Prefix = &value
	return b
}

// WithPrefixLength sets the PrefixLength field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrefixLength field is set to the value of the last call.
func (b *PrefixSpecApplyConfiguration) WithPrefixLength(value int32) *PrefixSpecApplyConfiguration {
	b.PrefixLength = &value
	return b
}

// WithParentRef sets the ParentRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ParentRef field is set to the value of the last call.
func (b *PrefixSpecApplyConfiguration) WithParentRef(value v1.LocalObjectReference) *PrefixSpecApplyConfiguration {
	b.ParentRef = &value
	return b
}

// WithParentSelector sets the ParentSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ParentSelector field is set to the value of the last call.
func (b *PrefixSpecApplyConfiguration) WithParentSelector(value *metav1.LabelSelectorApplyConfiguration) *PrefixSpecApplyConfiguration {
	b.ParentSelector = value
	return b
}
