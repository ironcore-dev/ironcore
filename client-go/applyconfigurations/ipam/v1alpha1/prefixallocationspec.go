// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/api/common/v1alpha1"
	metav1 "github.com/ironcore-dev/ironcore/client-go/applyconfigurations/meta/v1"
	v1 "k8s.io/api/core/v1"
)

// PrefixAllocationSpecApplyConfiguration represents an declarative configuration of the PrefixAllocationSpec type for use
// with apply.
type PrefixAllocationSpecApplyConfiguration struct {
	IPFamily       *v1.IPFamily                            `json:"ipFamily,omitempty"`
	Prefix         *v1alpha1.IPPrefix                      `json:"prefix,omitempty"`
	PrefixLength   *int32                                  `json:"prefixLength,omitempty"`
	PrefixRef      *v1.LocalObjectReference                `json:"prefixRef,omitempty"`
	PrefixSelector *metav1.LabelSelectorApplyConfiguration `json:"prefixSelector,omitempty"`
}

// PrefixAllocationSpecApplyConfiguration constructs an declarative configuration of the PrefixAllocationSpec type for use with
// apply.
func PrefixAllocationSpec() *PrefixAllocationSpecApplyConfiguration {
	return &PrefixAllocationSpecApplyConfiguration{}
}

// WithIPFamily sets the IPFamily field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPFamily field is set to the value of the last call.
func (b *PrefixAllocationSpecApplyConfiguration) WithIPFamily(value v1.IPFamily) *PrefixAllocationSpecApplyConfiguration {
	b.IPFamily = &value
	return b
}

// WithPrefix sets the Prefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Prefix field is set to the value of the last call.
func (b *PrefixAllocationSpecApplyConfiguration) WithPrefix(value v1alpha1.IPPrefix) *PrefixAllocationSpecApplyConfiguration {
	b.Prefix = &value
	return b
}

// WithPrefixLength sets the PrefixLength field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrefixLength field is set to the value of the last call.
func (b *PrefixAllocationSpecApplyConfiguration) WithPrefixLength(value int32) *PrefixAllocationSpecApplyConfiguration {
	b.PrefixLength = &value
	return b
}

// WithPrefixRef sets the PrefixRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrefixRef field is set to the value of the last call.
func (b *PrefixAllocationSpecApplyConfiguration) WithPrefixRef(value v1.LocalObjectReference) *PrefixAllocationSpecApplyConfiguration {
	b.PrefixRef = &value
	return b
}

// WithPrefixSelector sets the PrefixSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrefixSelector field is set to the value of the last call.
func (b *PrefixAllocationSpecApplyConfiguration) WithPrefixSelector(value *metav1.LabelSelectorApplyConfiguration) *PrefixAllocationSpecApplyConfiguration {
	b.PrefixSelector = value
	return b
}
