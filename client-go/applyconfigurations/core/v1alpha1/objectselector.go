// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ObjectSelectorApplyConfiguration represents a declarative configuration of the ObjectSelector type for use
// with apply.
type ObjectSelectorApplyConfiguration struct {
	Kind                               *string `json:"kind,omitempty"`
	v1.LabelSelectorApplyConfiguration `json:",inline"`
}

// ObjectSelectorApplyConfiguration constructs a declarative configuration of the ObjectSelector type for use with
// apply.
func ObjectSelector() *ObjectSelectorApplyConfiguration {
	return &ObjectSelectorApplyConfiguration{}
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *ObjectSelectorApplyConfiguration) WithKind(value string) *ObjectSelectorApplyConfiguration {
	b.Kind = &value
	return b
}

// WithMatchLabels puts the entries into the MatchLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the MatchLabels field,
// overwriting an existing map entries in MatchLabels field with the same key.
func (b *ObjectSelectorApplyConfiguration) WithMatchLabels(entries map[string]string) *ObjectSelectorApplyConfiguration {
	if b.LabelSelectorApplyConfiguration.MatchLabels == nil && len(entries) > 0 {
		b.LabelSelectorApplyConfiguration.MatchLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.LabelSelectorApplyConfiguration.MatchLabels[k] = v
	}
	return b
}

// WithMatchExpressions adds the given value to the MatchExpressions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MatchExpressions field.
func (b *ObjectSelectorApplyConfiguration) WithMatchExpressions(values ...*v1.LabelSelectorRequirementApplyConfiguration) *ObjectSelectorApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMatchExpressions")
		}
		b.LabelSelectorApplyConfiguration.MatchExpressions = append(b.LabelSelectorApplyConfiguration.MatchExpressions, *values[i])
	}
	return b
}
