/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/onmetal/onmetal-api/api/compute/v1alpha1"
)

// MachineStatusApplyConfiguration represents an declarative configuration of the MachineStatus type for use
// with apply.
type MachineStatusApplyConfiguration struct {
	State             *v1alpha1.MachineState                     `json:"state,omitempty"`
	Conditions        []MachineConditionApplyConfiguration       `json:"conditions,omitempty"`
	NetworkInterfaces []NetworkInterfaceStatusApplyConfiguration `json:"networkInterfaces,omitempty"`
	Volumes           []VolumeStatusApplyConfiguration           `json:"volumes,omitempty"`
}

// MachineStatusApplyConfiguration constructs an declarative configuration of the MachineStatus type for use with
// apply.
func MachineStatus() *MachineStatusApplyConfiguration {
	return &MachineStatusApplyConfiguration{}
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithState(value v1alpha1.MachineState) *MachineStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *MachineStatusApplyConfiguration) WithConditions(values ...*MachineConditionApplyConfiguration) *MachineStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithNetworkInterfaces adds the given value to the NetworkInterfaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NetworkInterfaces field.
func (b *MachineStatusApplyConfiguration) WithNetworkInterfaces(values ...*NetworkInterfaceStatusApplyConfiguration) *MachineStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNetworkInterfaces")
		}
		b.NetworkInterfaces = append(b.NetworkInterfaces, *values[i])
	}
	return b
}

// WithVolumes adds the given value to the Volumes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Volumes field.
func (b *MachineStatusApplyConfiguration) WithVolumes(values ...*VolumeStatusApplyConfiguration) *MachineStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumes")
		}
		b.Volumes = append(b.Volumes, *values[i])
	}
	return b
}
