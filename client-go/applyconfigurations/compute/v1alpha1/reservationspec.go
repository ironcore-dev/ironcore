// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/api/core/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// ReservationSpecApplyConfiguration represents an declarative configuration of the ReservationSpec type for use
// with apply.
type ReservationSpecApplyConfiguration struct {
	Pools     []v1.LocalObjectReference `json:"pools,omitempty"`
	Resources *v1alpha1.ResourceList    `json:"capabilities,omitempty"`
}

// ReservationSpecApplyConfiguration constructs an declarative configuration of the ReservationSpec type for use with
// apply.
func ReservationSpec() *ReservationSpecApplyConfiguration {
	return &ReservationSpecApplyConfiguration{}
}

// WithPools adds the given value to the Pools field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Pools field.
func (b *ReservationSpecApplyConfiguration) WithPools(values ...v1.LocalObjectReference) *ReservationSpecApplyConfiguration {
	for i := range values {
		b.Pools = append(b.Pools, values[i])
	}
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *ReservationSpecApplyConfiguration) WithResources(value v1alpha1.ResourceList) *ReservationSpecApplyConfiguration {
	b.Resources = &value
	return b
}
