// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/api/compute/v1alpha1"
	corev1alpha1 "github.com/ironcore-dev/ironcore/api/core/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// MachinePoolStatusApplyConfiguration represents an declarative configuration of the MachinePoolStatus type for use
// with apply.
type MachinePoolStatusApplyConfiguration struct {
	State                   *v1alpha1.MachinePoolState                    `json:"state,omitempty"`
	Conditions              []MachinePoolConditionApplyConfiguration      `json:"conditions,omitempty"`
	AvailableMachineClasses []v1.LocalObjectReference                     `json:"availableMachineClasses,omitempty"`
	Addresses               []MachinePoolAddressApplyConfiguration        `json:"addresses,omitempty"`
	DaemonEndpoints         *MachinePoolDaemonEndpointsApplyConfiguration `json:"daemonEndpoints,omitempty"`
	Capacity                *corev1alpha1.ResourceList                    `json:"capacity,omitempty"`
	Allocatable             *corev1alpha1.ResourceList                    `json:"allocatable,omitempty"`
}

// MachinePoolStatusApplyConfiguration constructs an declarative configuration of the MachinePoolStatus type for use with
// apply.
func MachinePoolStatus() *MachinePoolStatusApplyConfiguration {
	return &MachinePoolStatusApplyConfiguration{}
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *MachinePoolStatusApplyConfiguration) WithState(value v1alpha1.MachinePoolState) *MachinePoolStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *MachinePoolStatusApplyConfiguration) WithConditions(values ...*MachinePoolConditionApplyConfiguration) *MachinePoolStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithAvailableMachineClasses adds the given value to the AvailableMachineClasses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AvailableMachineClasses field.
func (b *MachinePoolStatusApplyConfiguration) WithAvailableMachineClasses(values ...v1.LocalObjectReference) *MachinePoolStatusApplyConfiguration {
	for i := range values {
		b.AvailableMachineClasses = append(b.AvailableMachineClasses, values[i])
	}
	return b
}

// WithAddresses adds the given value to the Addresses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Addresses field.
func (b *MachinePoolStatusApplyConfiguration) WithAddresses(values ...*MachinePoolAddressApplyConfiguration) *MachinePoolStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAddresses")
		}
		b.Addresses = append(b.Addresses, *values[i])
	}
	return b
}

// WithDaemonEndpoints sets the DaemonEndpoints field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DaemonEndpoints field is set to the value of the last call.
func (b *MachinePoolStatusApplyConfiguration) WithDaemonEndpoints(value *MachinePoolDaemonEndpointsApplyConfiguration) *MachinePoolStatusApplyConfiguration {
	b.DaemonEndpoints = value
	return b
}

// WithCapacity sets the Capacity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Capacity field is set to the value of the last call.
func (b *MachinePoolStatusApplyConfiguration) WithCapacity(value corev1alpha1.ResourceList) *MachinePoolStatusApplyConfiguration {
	b.Capacity = &value
	return b
}

// WithAllocatable sets the Allocatable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Allocatable field is set to the value of the last call.
func (b *MachinePoolStatusApplyConfiguration) WithAllocatable(value corev1alpha1.ResourceList) *MachinePoolStatusApplyConfiguration {
	b.Allocatable = &value
	return b
}
