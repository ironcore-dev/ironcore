// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	computev1alpha1 "github.com/ironcore-dev/ironcore/api/compute/v1alpha1"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VolumeStatusApplyConfiguration represents a declarative configuration of the VolumeStatus type for use
// with apply.
type VolumeStatusApplyConfiguration struct {
	Name                    *string                      `json:"name,omitempty"`
	Handle                  *string                      `json:"handle,omitempty"`
	State                   *computev1alpha1.VolumeState `json:"state,omitempty"`
	LastStateTransitionTime *v1.Time                     `json:"lastStateTransitionTime,omitempty"`
	VolumeRef               *corev1.LocalObjectReference `json:"volumeRef,omitempty"`
}

// VolumeStatusApplyConfiguration constructs a declarative configuration of the VolumeStatus type for use with
// apply.
func VolumeStatus() *VolumeStatusApplyConfiguration {
	return &VolumeStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithName(value string) *VolumeStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithHandle sets the Handle field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Handle field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithHandle(value string) *VolumeStatusApplyConfiguration {
	b.Handle = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithState(value computev1alpha1.VolumeState) *VolumeStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithLastStateTransitionTime sets the LastStateTransitionTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastStateTransitionTime field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithLastStateTransitionTime(value v1.Time) *VolumeStatusApplyConfiguration {
	b.LastStateTransitionTime = &value
	return b
}

// WithVolumeRef sets the VolumeRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeRef field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithVolumeRef(value corev1.LocalObjectReference) *VolumeStatusApplyConfiguration {
	b.VolumeRef = &value
	return b
}
