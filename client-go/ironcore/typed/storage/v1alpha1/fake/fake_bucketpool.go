// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha1 "github.com/ironcore-dev/ironcore/api/storage/v1alpha1"
	storagev1alpha1 "github.com/ironcore-dev/ironcore/client-go/applyconfigurations/storage/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeBucketPools implements BucketPoolInterface
type FakeBucketPools struct {
	Fake *FakeStorageV1alpha1
}

var bucketpoolsResource = v1alpha1.SchemeGroupVersion.WithResource("bucketpools")

var bucketpoolsKind = v1alpha1.SchemeGroupVersion.WithKind("BucketPool")

// Get takes name of the bucketPool, and returns the corresponding bucketPool object, and an error if there is any.
func (c *FakeBucketPools) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.BucketPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(bucketpoolsResource, name), &v1alpha1.BucketPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketPool), err
}

// List takes label and field selectors, and returns the list of BucketPools that match those selectors.
func (c *FakeBucketPools) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.BucketPoolList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(bucketpoolsResource, bucketpoolsKind, opts), &v1alpha1.BucketPoolList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.BucketPoolList{ListMeta: obj.(*v1alpha1.BucketPoolList).ListMeta}
	for _, item := range obj.(*v1alpha1.BucketPoolList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested bucketPools.
func (c *FakeBucketPools) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(bucketpoolsResource, opts))
}

// Create takes the representation of a bucketPool and creates it.  Returns the server's representation of the bucketPool, and an error, if there is any.
func (c *FakeBucketPools) Create(ctx context.Context, bucketPool *v1alpha1.BucketPool, opts v1.CreateOptions) (result *v1alpha1.BucketPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(bucketpoolsResource, bucketPool), &v1alpha1.BucketPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketPool), err
}

// Update takes the representation of a bucketPool and updates it. Returns the server's representation of the bucketPool, and an error, if there is any.
func (c *FakeBucketPools) Update(ctx context.Context, bucketPool *v1alpha1.BucketPool, opts v1.UpdateOptions) (result *v1alpha1.BucketPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(bucketpoolsResource, bucketPool), &v1alpha1.BucketPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketPool), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeBucketPools) UpdateStatus(ctx context.Context, bucketPool *v1alpha1.BucketPool, opts v1.UpdateOptions) (*v1alpha1.BucketPool, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(bucketpoolsResource, "status", bucketPool), &v1alpha1.BucketPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketPool), err
}

// Delete takes name of the bucketPool and deletes it. Returns an error if one occurs.
func (c *FakeBucketPools) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(bucketpoolsResource, name, opts), &v1alpha1.BucketPool{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeBucketPools) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(bucketpoolsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.BucketPoolList{})
	return err
}

// Patch applies the patch and returns the patched bucketPool.
func (c *FakeBucketPools) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.BucketPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(bucketpoolsResource, name, pt, data, subresources...), &v1alpha1.BucketPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketPool), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied bucketPool.
func (c *FakeBucketPools) Apply(ctx context.Context, bucketPool *storagev1alpha1.BucketPoolApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.BucketPool, err error) {
	if bucketPool == nil {
		return nil, fmt.Errorf("bucketPool provided to Apply must not be nil")
	}
	data, err := json.Marshal(bucketPool)
	if err != nil {
		return nil, err
	}
	name := bucketPool.Name
	if name == nil {
		return nil, fmt.Errorf("bucketPool.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(bucketpoolsResource, *name, types.ApplyPatchType, data), &v1alpha1.BucketPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketPool), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeBucketPools) ApplyStatus(ctx context.Context, bucketPool *storagev1alpha1.BucketPoolApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.BucketPool, err error) {
	if bucketPool == nil {
		return nil, fmt.Errorf("bucketPool provided to Apply must not be nil")
	}
	data, err := json.Marshal(bucketPool)
	if err != nil {
		return nil, err
	}
	name := bucketPool.Name
	if name == nil {
		return nil, fmt.Errorf("bucketPool.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(bucketpoolsResource, *name, types.ApplyPatchType, data, "status"), &v1alpha1.BucketPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketPool), err
}
