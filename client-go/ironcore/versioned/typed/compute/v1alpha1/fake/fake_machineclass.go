// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/api/compute/v1alpha1"
	computev1alpha1 "github.com/ironcore-dev/ironcore/client-go/applyconfigurations/compute/v1alpha1"
	typedcomputev1alpha1 "github.com/ironcore-dev/ironcore/client-go/ironcore/versioned/typed/compute/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeMachineClasses implements MachineClassInterface
type fakeMachineClasses struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.MachineClass, *v1alpha1.MachineClassList, *computev1alpha1.MachineClassApplyConfiguration]
	Fake *FakeComputeV1alpha1
}

func newFakeMachineClasses(fake *FakeComputeV1alpha1) typedcomputev1alpha1.MachineClassInterface {
	return &fakeMachineClasses{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.MachineClass, *v1alpha1.MachineClassList, *computev1alpha1.MachineClassApplyConfiguration](
			fake.Fake,
			"",
			v1alpha1.SchemeGroupVersion.WithResource("machineclasses"),
			v1alpha1.SchemeGroupVersion.WithKind("MachineClass"),
			func() *v1alpha1.MachineClass { return &v1alpha1.MachineClass{} },
			func() *v1alpha1.MachineClassList { return &v1alpha1.MachineClassList{} },
			func(dst, src *v1alpha1.MachineClassList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.MachineClassList) []*v1alpha1.MachineClass {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.MachineClassList, items []*v1alpha1.MachineClass) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
