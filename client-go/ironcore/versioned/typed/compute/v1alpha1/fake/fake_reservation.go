// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/api/compute/v1alpha1"
	computev1alpha1 "github.com/ironcore-dev/ironcore/client-go/applyconfigurations/compute/v1alpha1"
	typedcomputev1alpha1 "github.com/ironcore-dev/ironcore/client-go/ironcore/versioned/typed/compute/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeReservations implements ReservationInterface
type fakeReservations struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.Reservation, *v1alpha1.ReservationList, *computev1alpha1.ReservationApplyConfiguration]
	Fake *FakeComputeV1alpha1
}

func newFakeReservations(fake *FakeComputeV1alpha1, namespace string) typedcomputev1alpha1.ReservationInterface {
	return &fakeReservations{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.Reservation, *v1alpha1.ReservationList, *computev1alpha1.ReservationApplyConfiguration](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("reservations"),
			v1alpha1.SchemeGroupVersion.WithKind("Reservation"),
			func() *v1alpha1.Reservation { return &v1alpha1.Reservation{} },
			func() *v1alpha1.ReservationList { return &v1alpha1.ReservationList{} },
			func(dst, src *v1alpha1.ReservationList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.ReservationList) []*v1alpha1.Reservation {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.ReservationList, items []*v1alpha1.Reservation) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
