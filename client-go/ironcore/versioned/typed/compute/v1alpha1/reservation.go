// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	computev1alpha1 "github.com/ironcore-dev/ironcore/api/compute/v1alpha1"
	applyconfigurationscomputev1alpha1 "github.com/ironcore-dev/ironcore/client-go/applyconfigurations/compute/v1alpha1"
	scheme "github.com/ironcore-dev/ironcore/client-go/ironcore/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ReservationsGetter has a method to return a ReservationInterface.
// A group's client should implement this interface.
type ReservationsGetter interface {
	Reservations(namespace string) ReservationInterface
}

// ReservationInterface has methods to work with Reservation resources.
type ReservationInterface interface {
	Create(ctx context.Context, reservation *computev1alpha1.Reservation, opts v1.CreateOptions) (*computev1alpha1.Reservation, error)
	Update(ctx context.Context, reservation *computev1alpha1.Reservation, opts v1.UpdateOptions) (*computev1alpha1.Reservation, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, reservation *computev1alpha1.Reservation, opts v1.UpdateOptions) (*computev1alpha1.Reservation, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*computev1alpha1.Reservation, error)
	List(ctx context.Context, opts v1.ListOptions) (*computev1alpha1.ReservationList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *computev1alpha1.Reservation, err error)
	Apply(ctx context.Context, reservation *applyconfigurationscomputev1alpha1.ReservationApplyConfiguration, opts v1.ApplyOptions) (result *computev1alpha1.Reservation, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, reservation *applyconfigurationscomputev1alpha1.ReservationApplyConfiguration, opts v1.ApplyOptions) (result *computev1alpha1.Reservation, err error)
	ReservationExpansion
}

// reservations implements ReservationInterface
type reservations struct {
	*gentype.ClientWithListAndApply[*computev1alpha1.Reservation, *computev1alpha1.ReservationList, *applyconfigurationscomputev1alpha1.ReservationApplyConfiguration]
}

// newReservations returns a Reservations
func newReservations(c *ComputeV1alpha1Client, namespace string) *reservations {
	return &reservations{
		gentype.NewClientWithListAndApply[*computev1alpha1.Reservation, *computev1alpha1.ReservationList, *applyconfigurationscomputev1alpha1.ReservationApplyConfiguration](
			"reservations",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *computev1alpha1.Reservation { return &computev1alpha1.Reservation{} },
			func() *computev1alpha1.ReservationList { return &computev1alpha1.ReservationList{} },
		),
	}
}
