// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/ironcore-dev/ironcore/api/ipam/v1alpha1"
	ipamv1alpha1 "github.com/ironcore-dev/ironcore/client-go/applyconfigurations/ipam/v1alpha1"
	typedipamv1alpha1 "github.com/ironcore-dev/ironcore/client-go/ironcore/versioned/typed/ipam/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakePrefixes implements PrefixInterface
type fakePrefixes struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.Prefix, *v1alpha1.PrefixList, *ipamv1alpha1.PrefixApplyConfiguration]
	Fake *FakeIpamV1alpha1
}

func newFakePrefixes(fake *FakeIpamV1alpha1, namespace string) typedipamv1alpha1.PrefixInterface {
	return &fakePrefixes{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.Prefix, *v1alpha1.PrefixList, *ipamv1alpha1.PrefixApplyConfiguration](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("prefixes"),
			v1alpha1.SchemeGroupVersion.WithKind("Prefix"),
			func() *v1alpha1.Prefix { return &v1alpha1.Prefix{} },
			func() *v1alpha1.PrefixList { return &v1alpha1.PrefixList{} },
			func(dst, src *v1alpha1.PrefixList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.PrefixList) []*v1alpha1.Prefix { return gentype.ToPointerSlice(list.Items) },
			func(list *v1alpha1.PrefixList, items []*v1alpha1.Prefix) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
