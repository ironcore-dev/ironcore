/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha1 "github.com/onmetal/onmetal-api/api/networking/v1alpha1"
	networkingv1alpha1 "github.com/onmetal/onmetal-api/client-go/applyconfigurations/networking/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNATGatewayRoutings implements NATGatewayRoutingInterface
type FakeNATGatewayRoutings struct {
	Fake *FakeNetworkingV1alpha1
	ns   string
}

var natgatewayroutingsResource = v1alpha1.SchemeGroupVersion.WithResource("natgatewayroutings")

var natgatewayroutingsKind = v1alpha1.SchemeGroupVersion.WithKind("NATGatewayRouting")

// Get takes name of the nATGatewayRouting, and returns the corresponding nATGatewayRouting object, and an error if there is any.
func (c *FakeNATGatewayRoutings) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.NATGatewayRouting, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(natgatewayroutingsResource, c.ns, name), &v1alpha1.NATGatewayRouting{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayRouting), err
}

// List takes label and field selectors, and returns the list of NATGatewayRoutings that match those selectors.
func (c *FakeNATGatewayRoutings) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.NATGatewayRoutingList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(natgatewayroutingsResource, natgatewayroutingsKind, c.ns, opts), &v1alpha1.NATGatewayRoutingList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.NATGatewayRoutingList{ListMeta: obj.(*v1alpha1.NATGatewayRoutingList).ListMeta}
	for _, item := range obj.(*v1alpha1.NATGatewayRoutingList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested nATGatewayRoutings.
func (c *FakeNATGatewayRoutings) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(natgatewayroutingsResource, c.ns, opts))

}

// Create takes the representation of a nATGatewayRouting and creates it.  Returns the server's representation of the nATGatewayRouting, and an error, if there is any.
func (c *FakeNATGatewayRoutings) Create(ctx context.Context, nATGatewayRouting *v1alpha1.NATGatewayRouting, opts v1.CreateOptions) (result *v1alpha1.NATGatewayRouting, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(natgatewayroutingsResource, c.ns, nATGatewayRouting), &v1alpha1.NATGatewayRouting{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayRouting), err
}

// Update takes the representation of a nATGatewayRouting and updates it. Returns the server's representation of the nATGatewayRouting, and an error, if there is any.
func (c *FakeNATGatewayRoutings) Update(ctx context.Context, nATGatewayRouting *v1alpha1.NATGatewayRouting, opts v1.UpdateOptions) (result *v1alpha1.NATGatewayRouting, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(natgatewayroutingsResource, c.ns, nATGatewayRouting), &v1alpha1.NATGatewayRouting{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayRouting), err
}

// Delete takes name of the nATGatewayRouting and deletes it. Returns an error if one occurs.
func (c *FakeNATGatewayRoutings) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(natgatewayroutingsResource, c.ns, name, opts), &v1alpha1.NATGatewayRouting{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNATGatewayRoutings) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(natgatewayroutingsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.NATGatewayRoutingList{})
	return err
}

// Patch applies the patch and returns the patched nATGatewayRouting.
func (c *FakeNATGatewayRoutings) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.NATGatewayRouting, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(natgatewayroutingsResource, c.ns, name, pt, data, subresources...), &v1alpha1.NATGatewayRouting{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayRouting), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied nATGatewayRouting.
func (c *FakeNATGatewayRoutings) Apply(ctx context.Context, nATGatewayRouting *networkingv1alpha1.NATGatewayRoutingApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.NATGatewayRouting, err error) {
	if nATGatewayRouting == nil {
		return nil, fmt.Errorf("nATGatewayRouting provided to Apply must not be nil")
	}
	data, err := json.Marshal(nATGatewayRouting)
	if err != nil {
		return nil, err
	}
	name := nATGatewayRouting.Name
	if name == nil {
		return nil, fmt.Errorf("nATGatewayRouting.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(natgatewayroutingsResource, c.ns, *name, types.ApplyPatchType, data), &v1alpha1.NATGatewayRouting{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayRouting), err
}
