// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onmetal/onmetal-api/machinepoollet/server (interfaces: MachineExec)

// Package server is a generated GoMock package.
package server

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	remotecommand "k8s.io/client-go/tools/remotecommand"
)

// MockMachineExec is a mock of MachineExec interface.
type MockMachineExec struct {
	ctrl     *gomock.Controller
	recorder *MockMachineExecMockRecorder
}

// MockMachineExecMockRecorder is the mock recorder for MockMachineExec.
type MockMachineExecMockRecorder struct {
	mock *MockMachineExec
}

// NewMockMachineExec creates a new mock instance.
func NewMockMachineExec(ctrl *gomock.Controller) *MockMachineExec {
	mock := &MockMachineExec{ctrl: ctrl}
	mock.recorder = &MockMachineExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineExec) EXPECT() *MockMachineExecMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockMachineExec) Exec(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4, arg5 io.WriteCloser, arg6 <-chan remotecommand.TerminalSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockMachineExecMockRecorder) Exec(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockMachineExec)(nil).Exec), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
