syntax = "proto3";

package volume.v1alpha1;
option go_package = "github.com/ironcore-dev/ironcore/iri/apis/volume/v1alpha1";

import "meta/v1alpha1/api.proto";
import "event/v1alpha1/api.proto";

service VolumeRuntime {
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {};
  rpc ListVolumes(ListVolumesRequest) returns (ListVolumesResponse) {};
  rpc CreateVolume(CreateVolumeRequest) returns (CreateVolumeResponse) {};
  rpc ExpandVolume(ExpandVolumeRequest) returns (ExpandVolumeResponse) {};
  rpc DeleteVolume(DeleteVolumeRequest) returns (DeleteVolumeResponse) {};

  rpc Status(StatusRequest) returns (StatusResponse) {};
}

message VolumeFilter {
  string id = 1;
  map<string, string> label_selector = 2;
}

message EventFilter {
  string id = 1;
  map<string, string> label_selector = 2;
  int64 events_from_time = 3;
  int64 events_to_time = 4;
}

message VolumeResources {
  int64 storage_bytes = 1;
}

message EncryptionSpec {
  map<string, bytes> secret_data = 1;
}

message VolumeSpec {
  string image = 1;
  string class = 2;
  VolumeResources resources = 3;
  EncryptionSpec encryption = 4;
}

message VolumeStatus {
  VolumeState state = 1;
  VolumeAccess access = 2;
}

message Volume {
  meta.v1alpha1.ObjectMetadata metadata = 1;
  VolumeSpec spec = 2;
  VolumeStatus status = 3;
}

message VolumeClassCapabilities {
  int64 tps = 1;
  int64 iops = 2;
}

message VolumeClass {
  string name = 1;
  VolumeClassCapabilities capabilities = 2;
}

message VolumeClassStatus {
  VolumeClass volume_class = 1;
  int64 quantity = 2;
}

message VolumeAccess {
  string driver = 1;
  string handle = 2;
  map<string, string> attributes = 3;
  map<string, bytes> secret_data = 4;
}

enum VolumeState {
  VOLUME_PENDING = 0;
  VOLUME_AVAILABLE = 1;
  VOLUME_ERROR = 2;
}

message ListEventsRequest {
  EventFilter filter = 1;
}

message ListEventsResponse {
  repeated event.v1alpha1.Event events = 1;
}


message ListVolumesRequest {
  VolumeFilter filter = 1;
}

message ListVolumesResponse {
  repeated Volume volumes = 1;
}

message CreateVolumeRequest {
  Volume volume = 1;
}

message ExpandVolumeRequest {
  string volume_id = 1;
  VolumeResources resources = 2;
}

message CreateVolumeResponse {
  Volume volume = 1;
}

message ExpandVolumeResponse {
}

message DeleteVolumeRequest {
  string volume_id = 1;
}

message DeleteVolumeResponse {
}

message StatusRequest {
}

message StatusResponse {
  repeated VolumeClassStatus volume_class_status = 1;
}
