// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: volume/v1alpha1/api.proto

package v1alpha1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	v1alpha11 "github.com/ironcore-dev/ironcore/iri/apis/event/v1alpha1"
	v1alpha1 "github.com/ironcore-dev/ironcore/iri/apis/meta/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VolumeState int32

const (
	VolumeState_VOLUME_PENDING   VolumeState = 0
	VolumeState_VOLUME_AVAILABLE VolumeState = 1
	VolumeState_VOLUME_ERROR     VolumeState = 2
)

// Enum value maps for VolumeState.
var (
	VolumeState_name = map[int32]string{
		0: "VOLUME_PENDING",
		1: "VOLUME_AVAILABLE",
		2: "VOLUME_ERROR",
	}
	VolumeState_value = map[string]int32{
		"VOLUME_PENDING":   0,
		"VOLUME_AVAILABLE": 1,
		"VOLUME_ERROR":     2,
	}
)

func (x VolumeState) Enum() *VolumeState {
	p := new(VolumeState)
	*p = x
	return p
}

func (x VolumeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeState) Descriptor() protoreflect.EnumDescriptor {
	return file_volume_v1alpha1_api_proto_enumTypes[0].Descriptor()
}

func (VolumeState) Type() protoreflect.EnumType {
	return &file_volume_v1alpha1_api_proto_enumTypes[0]
}

func (x VolumeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeState.Descriptor instead.
func (VolumeState) EnumDescriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{0}
}

type VolumeSnapshotState int32

const (
	VolumeSnapshotState_VOLUME_SNAPSHOT_PENDING VolumeSnapshotState = 0
	VolumeSnapshotState_VOLUME_SNAPSHOT_READY   VolumeSnapshotState = 1
	VolumeSnapshotState_VOLUME_SNAPSHOT_FAILED  VolumeSnapshotState = 2
)

// Enum value maps for VolumeSnapshotState.
var (
	VolumeSnapshotState_name = map[int32]string{
		0: "VOLUME_SNAPSHOT_PENDING",
		1: "VOLUME_SNAPSHOT_READY",
		2: "VOLUME_SNAPSHOT_FAILED",
	}
	VolumeSnapshotState_value = map[string]int32{
		"VOLUME_SNAPSHOT_PENDING": 0,
		"VOLUME_SNAPSHOT_READY":   1,
		"VOLUME_SNAPSHOT_FAILED":  2,
	}
)

func (x VolumeSnapshotState) Enum() *VolumeSnapshotState {
	p := new(VolumeSnapshotState)
	*p = x
	return p
}

func (x VolumeSnapshotState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeSnapshotState) Descriptor() protoreflect.EnumDescriptor {
	return file_volume_v1alpha1_api_proto_enumTypes[1].Descriptor()
}

func (VolumeSnapshotState) Type() protoreflect.EnumType {
	return &file_volume_v1alpha1_api_proto_enumTypes[1]
}

func (x VolumeSnapshotState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeSnapshotState.Descriptor instead.
func (VolumeSnapshotState) EnumDescriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{1}
}

type VolumeFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LabelSelector map[string]string      `protobuf:"bytes,2,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeFilter) Reset() {
	*x = VolumeFilter{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeFilter) ProtoMessage() {}

func (x *VolumeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeFilter.ProtoReflect.Descriptor instead.
func (*VolumeFilter) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{0}
}

func (x *VolumeFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VolumeFilter) GetLabelSelector() map[string]string {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

type EventFilter struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LabelSelector  map[string]string      `protobuf:"bytes,2,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EventsFromTime int64                  `protobuf:"varint,3,opt,name=events_from_time,json=eventsFromTime,proto3" json:"events_from_time,omitempty"`
	EventsToTime   int64                  `protobuf:"varint,4,opt,name=events_to_time,json=eventsToTime,proto3" json:"events_to_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventFilter) Reset() {
	*x = EventFilter{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFilter) ProtoMessage() {}

func (x *EventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFilter.ProtoReflect.Descriptor instead.
func (*EventFilter) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{1}
}

func (x *EventFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventFilter) GetLabelSelector() map[string]string {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

func (x *EventFilter) GetEventsFromTime() int64 {
	if x != nil {
		return x.EventsFromTime
	}
	return 0
}

func (x *EventFilter) GetEventsToTime() int64 {
	if x != nil {
		return x.EventsToTime
	}
	return 0
}

type VolumeResources struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StorageBytes  int64                  `protobuf:"varint,1,opt,name=storage_bytes,json=storageBytes,proto3" json:"storage_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeResources) Reset() {
	*x = VolumeResources{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeResources) ProtoMessage() {}

func (x *VolumeResources) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeResources.ProtoReflect.Descriptor instead.
func (*VolumeResources) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{2}
}

func (x *VolumeResources) GetStorageBytes() int64 {
	if x != nil {
		return x.StorageBytes
	}
	return 0
}

type EncryptionSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SecretData    map[string][]byte      `protobuf:"bytes,1,rep,name=secret_data,json=secretData,proto3" json:"secret_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptionSpec) Reset() {
	*x = EncryptionSpec{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionSpec) ProtoMessage() {}

func (x *EncryptionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionSpec.ProtoReflect.Descriptor instead.
func (*EncryptionSpec) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{3}
}

func (x *EncryptionSpec) GetSecretData() map[string][]byte {
	if x != nil {
		return x.SecretData
	}
	return nil
}

type ImageDataSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Image         string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageDataSource) Reset() {
	*x = ImageDataSource{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDataSource) ProtoMessage() {}

func (x *ImageDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDataSource.ProtoReflect.Descriptor instead.
func (*ImageDataSource) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{4}
}

func (x *ImageDataSource) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type SnapshotDataSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SnapshotId    string                 `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotDataSource) Reset() {
	*x = SnapshotDataSource{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotDataSource) ProtoMessage() {}

func (x *SnapshotDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotDataSource.ProtoReflect.Descriptor instead.
func (*SnapshotDataSource) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{5}
}

func (x *SnapshotDataSource) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

type VolumeDataSource struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ImageDataSource    *ImageDataSource       `protobuf:"bytes,1,opt,name=image_data_source,json=imageDataSource,proto3" json:"image_data_source,omitempty"`
	SnapshotDataSource *SnapshotDataSource    `protobuf:"bytes,2,opt,name=snapshot_data_source,json=snapshotDataSource,proto3" json:"snapshot_data_source,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *VolumeDataSource) Reset() {
	*x = VolumeDataSource{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDataSource) ProtoMessage() {}

func (x *VolumeDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDataSource.ProtoReflect.Descriptor instead.
func (*VolumeDataSource) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{6}
}

func (x *VolumeDataSource) GetImageDataSource() *ImageDataSource {
	if x != nil {
		return x.ImageDataSource
	}
	return nil
}

func (x *VolumeDataSource) GetSnapshotDataSource() *SnapshotDataSource {
	if x != nil {
		return x.SnapshotDataSource
	}
	return nil
}

type VolumeSpec struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Image            string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Class            string                 `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	Resources        *VolumeResources       `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	Encryption       *EncryptionSpec        `protobuf:"bytes,4,opt,name=encryption,proto3" json:"encryption,omitempty"`
	VolumeDataSource *VolumeDataSource      `protobuf:"bytes,5,opt,name=volume_data_source,json=volumeDataSource,proto3" json:"volume_data_source,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VolumeSpec) Reset() {
	*x = VolumeSpec{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSpec) ProtoMessage() {}

func (x *VolumeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSpec.ProtoReflect.Descriptor instead.
func (*VolumeSpec) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{7}
}

func (x *VolumeSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *VolumeSpec) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *VolumeSpec) GetResources() *VolumeResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *VolumeSpec) GetEncryption() *EncryptionSpec {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *VolumeSpec) GetVolumeDataSource() *VolumeDataSource {
	if x != nil {
		return x.VolumeDataSource
	}
	return nil
}

type VolumeStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         VolumeState            `protobuf:"varint,1,opt,name=state,proto3,enum=volume.v1alpha1.VolumeState" json:"state,omitempty"`
	Access        *VolumeAccess          `protobuf:"bytes,2,opt,name=access,proto3" json:"access,omitempty"`
	Resources     *VolumeResources       `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeStatus) Reset() {
	*x = VolumeStatus{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeStatus) ProtoMessage() {}

func (x *VolumeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeStatus.ProtoReflect.Descriptor instead.
func (*VolumeStatus) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{8}
}

func (x *VolumeStatus) GetState() VolumeState {
	if x != nil {
		return x.State
	}
	return VolumeState_VOLUME_PENDING
}

func (x *VolumeStatus) GetAccess() *VolumeAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *VolumeStatus) GetResources() *VolumeResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type Volume struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Metadata      *v1alpha1.ObjectMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *VolumeSpec              `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *VolumeStatus            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Volume) Reset() {
	*x = Volume{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{9}
}

func (x *Volume) GetMetadata() *v1alpha1.ObjectMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Volume) GetSpec() *VolumeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Volume) GetStatus() *VolumeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type VolumeClassCapabilities struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tps           int64                  `protobuf:"varint,1,opt,name=tps,proto3" json:"tps,omitempty"`
	Iops          int64                  `protobuf:"varint,2,opt,name=iops,proto3" json:"iops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeClassCapabilities) Reset() {
	*x = VolumeClassCapabilities{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeClassCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeClassCapabilities) ProtoMessage() {}

func (x *VolumeClassCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeClassCapabilities.ProtoReflect.Descriptor instead.
func (*VolumeClassCapabilities) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{10}
}

func (x *VolumeClassCapabilities) GetTps() int64 {
	if x != nil {
		return x.Tps
	}
	return 0
}

func (x *VolumeClassCapabilities) GetIops() int64 {
	if x != nil {
		return x.Iops
	}
	return 0
}

type VolumeClass struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Name          string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Capabilities  *VolumeClassCapabilities `protobuf:"bytes,2,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeClass) Reset() {
	*x = VolumeClass{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeClass) ProtoMessage() {}

func (x *VolumeClass) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeClass.ProtoReflect.Descriptor instead.
func (*VolumeClass) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{11}
}

func (x *VolumeClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeClass) GetCapabilities() *VolumeClassCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type VolumeClassStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VolumeClass   *VolumeClass           `protobuf:"bytes,1,opt,name=volume_class,json=volumeClass,proto3" json:"volume_class,omitempty"`
	Quantity      int64                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeClassStatus) Reset() {
	*x = VolumeClassStatus{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeClassStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeClassStatus) ProtoMessage() {}

func (x *VolumeClassStatus) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeClassStatus.ProtoReflect.Descriptor instead.
func (*VolumeClassStatus) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{12}
}

func (x *VolumeClassStatus) GetVolumeClass() *VolumeClass {
	if x != nil {
		return x.VolumeClass
	}
	return nil
}

func (x *VolumeClassStatus) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type VolumeAccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Handle        string                 `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
	Attributes    map[string]string      `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SecretData    map[string][]byte      `protobuf:"bytes,4,rep,name=secret_data,json=secretData,proto3" json:"secret_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeAccess) Reset() {
	*x = VolumeAccess{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeAccess) ProtoMessage() {}

func (x *VolumeAccess) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeAccess.ProtoReflect.Descriptor instead.
func (*VolumeAccess) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{13}
}

func (x *VolumeAccess) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *VolumeAccess) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *VolumeAccess) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *VolumeAccess) GetSecretData() map[string][]byte {
	if x != nil {
		return x.SecretData
	}
	return nil
}

type ListEventsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *EventFilter           `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{14}
}

func (x *ListEventsRequest) GetFilter() *EventFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListEventsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*v1alpha11.Event     `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEventsResponse) Reset() {
	*x = ListEventsResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsResponse) ProtoMessage() {}

func (x *ListEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsResponse.ProtoReflect.Descriptor instead.
func (*ListEventsResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{15}
}

func (x *ListEventsResponse) GetEvents() []*v1alpha11.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type VersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{16}
}

func (x *VersionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VersionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the volume runtime.
	RuntimeName string `protobuf:"bytes,1,opt,name=runtime_name,json=runtimeName,proto3" json:"runtime_name,omitempty"`
	// Version of the volume runtime. The string must be
	// semver-compatible.
	RuntimeVersion string `protobuf:"bytes,2,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{17}
}

func (x *VersionResponse) GetRuntimeName() string {
	if x != nil {
		return x.RuntimeName
	}
	return ""
}

func (x *VersionResponse) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

type ListVolumesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *VolumeFilter          `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVolumesRequest) Reset() {
	*x = ListVolumesRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumesRequest) ProtoMessage() {}

func (x *ListVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumesRequest.ProtoReflect.Descriptor instead.
func (*ListVolumesRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{18}
}

func (x *ListVolumesRequest) GetFilter() *VolumeFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListVolumesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Volumes       []*Volume              `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVolumesResponse) Reset() {
	*x = ListVolumesResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumesResponse) ProtoMessage() {}

func (x *ListVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumesResponse.ProtoReflect.Descriptor instead.
func (*ListVolumesResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{19}
}

func (x *ListVolumesResponse) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type CreateVolumeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Volume        *Volume                `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVolumeRequest) Reset() {
	*x = CreateVolumeRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeRequest) ProtoMessage() {}

func (x *CreateVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeRequest.ProtoReflect.Descriptor instead.
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{20}
}

func (x *CreateVolumeRequest) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type ExpandVolumeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VolumeId      string                 `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	Resources     *VolumeResources       `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpandVolumeRequest) Reset() {
	*x = ExpandVolumeRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpandVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandVolumeRequest) ProtoMessage() {}

func (x *ExpandVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandVolumeRequest.ProtoReflect.Descriptor instead.
func (*ExpandVolumeRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{21}
}

func (x *ExpandVolumeRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *ExpandVolumeRequest) GetResources() *VolumeResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type CreateVolumeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Volume        *Volume                `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVolumeResponse) Reset() {
	*x = CreateVolumeResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeResponse) ProtoMessage() {}

func (x *CreateVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeResponse.ProtoReflect.Descriptor instead.
func (*CreateVolumeResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{22}
}

func (x *CreateVolumeResponse) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type ExpandVolumeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpandVolumeResponse) Reset() {
	*x = ExpandVolumeResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpandVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandVolumeResponse) ProtoMessage() {}

func (x *ExpandVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandVolumeResponse.ProtoReflect.Descriptor instead.
func (*ExpandVolumeResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{23}
}

type DeleteVolumeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VolumeId      string                 `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVolumeRequest) Reset() {
	*x = DeleteVolumeRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeRequest) ProtoMessage() {}

func (x *DeleteVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeRequest.ProtoReflect.Descriptor instead.
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteVolumeRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

type DeleteVolumeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVolumeResponse) Reset() {
	*x = DeleteVolumeResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeResponse) ProtoMessage() {}

func (x *DeleteVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeResponse.ProtoReflect.Descriptor instead.
func (*DeleteVolumeResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{25}
}

type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{26}
}

type StatusResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	VolumeClassStatus []*VolumeClassStatus   `protobuf:"bytes,1,rep,name=volume_class_status,json=volumeClassStatus,proto3" json:"volume_class_status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{27}
}

func (x *StatusResponse) GetVolumeClassStatus() []*VolumeClassStatus {
	if x != nil {
		return x.VolumeClassStatus
	}
	return nil
}

type VolumeSnapshotSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VolumeId      string                 `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotSpec) Reset() {
	*x = VolumeSnapshotSpec{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotSpec) ProtoMessage() {}

func (x *VolumeSnapshotSpec) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotSpec.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotSpec) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{28}
}

func (x *VolumeSnapshotSpec) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

type VolumeSnapshotStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         VolumeSnapshotState    `protobuf:"varint,1,opt,name=state,proto3,enum=volume.v1alpha1.VolumeSnapshotState" json:"state,omitempty"`
	RestoreSize   int64                  `protobuf:"varint,2,opt,name=restore_size,json=restoreSize,proto3" json:"restore_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotStatus) Reset() {
	*x = VolumeSnapshotStatus{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotStatus) ProtoMessage() {}

func (x *VolumeSnapshotStatus) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotStatus.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotStatus) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{29}
}

func (x *VolumeSnapshotStatus) GetState() VolumeSnapshotState {
	if x != nil {
		return x.State
	}
	return VolumeSnapshotState_VOLUME_SNAPSHOT_PENDING
}

func (x *VolumeSnapshotStatus) GetRestoreSize() int64 {
	if x != nil {
		return x.RestoreSize
	}
	return 0
}

type VolumeSnapshot struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Metadata      *v1alpha1.ObjectMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *VolumeSnapshotSpec      `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *VolumeSnapshotStatus    `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshot) Reset() {
	*x = VolumeSnapshot{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshot) ProtoMessage() {}

func (x *VolumeSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshot.ProtoReflect.Descriptor instead.
func (*VolumeSnapshot) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{30}
}

func (x *VolumeSnapshot) GetMetadata() *v1alpha1.ObjectMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VolumeSnapshot) GetSpec() *VolumeSnapshotSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *VolumeSnapshot) GetStatus() *VolumeSnapshotStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type UIDReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Uid           string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UIDReference) Reset() {
	*x = UIDReference{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UIDReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDReference) ProtoMessage() {}

func (x *UIDReference) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDReference.ProtoReflect.Descriptor instead.
func (*UIDReference) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{31}
}

func (x *UIDReference) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UIDReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UIDReference) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type VolumeSnapshotContentSpec struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	VolumeSnapshotHandle string                 `protobuf:"bytes,1,opt,name=volume_snapshot_handle,json=volumeSnapshotHandle,proto3" json:"volume_snapshot_handle,omitempty"`
	SnapshotRef          *UIDReference          `protobuf:"bytes,2,opt,name=snapshot_ref,json=snapshotRef,proto3" json:"snapshot_ref,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *VolumeSnapshotContentSpec) Reset() {
	*x = VolumeSnapshotContentSpec{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotContentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotContentSpec) ProtoMessage() {}

func (x *VolumeSnapshotContentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotContentSpec.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotContentSpec) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{32}
}

func (x *VolumeSnapshotContentSpec) GetVolumeSnapshotHandle() string {
	if x != nil {
		return x.VolumeSnapshotHandle
	}
	return ""
}

func (x *VolumeSnapshotContentSpec) GetSnapshotRef() *UIDReference {
	if x != nil {
		return x.SnapshotRef
	}
	return nil
}

type VolumeSnapshotContent struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Metadata      *v1alpha1.ObjectMetadata   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *VolumeSnapshotContentSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotContent) Reset() {
	*x = VolumeSnapshotContent{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotContent) ProtoMessage() {}

func (x *VolumeSnapshotContent) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotContent.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotContent) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{33}
}

func (x *VolumeSnapshotContent) GetMetadata() *v1alpha1.ObjectMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VolumeSnapshotContent) GetSpec() *VolumeSnapshotContentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type VolumeSnapshotFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LabelSelector map[string]string      `protobuf:"bytes,2,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotFilter) Reset() {
	*x = VolumeSnapshotFilter{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotFilter) ProtoMessage() {}

func (x *VolumeSnapshotFilter) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotFilter.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotFilter) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{34}
}

func (x *VolumeSnapshotFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VolumeSnapshotFilter) GetLabelSelector() map[string]string {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

type VolumeSnapshotContentFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LabelSelector map[string]string      `protobuf:"bytes,2,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSnapshotContentFilter) Reset() {
	*x = VolumeSnapshotContentFilter{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSnapshotContentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSnapshotContentFilter) ProtoMessage() {}

func (x *VolumeSnapshotContentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSnapshotContentFilter.ProtoReflect.Descriptor instead.
func (*VolumeSnapshotContentFilter) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{35}
}

func (x *VolumeSnapshotContentFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VolumeSnapshotContentFilter) GetLabelSelector() map[string]string {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

type ListVolumeSnapshotsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *VolumeSnapshotFilter  `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVolumeSnapshotsRequest) Reset() {
	*x = ListVolumeSnapshotsRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVolumeSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeSnapshotsRequest) ProtoMessage() {}

func (x *ListVolumeSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListVolumeSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{36}
}

func (x *ListVolumeSnapshotsRequest) GetFilter() *VolumeSnapshotFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListVolumeSnapshotsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	VolumeSnapshots []*VolumeSnapshot      `protobuf:"bytes,1,rep,name=volume_snapshots,json=volumeSnapshots,proto3" json:"volume_snapshots,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListVolumeSnapshotsResponse) Reset() {
	*x = ListVolumeSnapshotsResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVolumeSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeSnapshotsResponse) ProtoMessage() {}

func (x *ListVolumeSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListVolumeSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{37}
}

func (x *ListVolumeSnapshotsResponse) GetVolumeSnapshots() []*VolumeSnapshot {
	if x != nil {
		return x.VolumeSnapshots
	}
	return nil
}

type CreateVolumeSnapshotRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	VolumeSnapshot *VolumeSnapshot        `protobuf:"bytes,1,opt,name=volume_snapshot,json=volumeSnapshot,proto3" json:"volume_snapshot,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateVolumeSnapshotRequest) Reset() {
	*x = CreateVolumeSnapshotRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVolumeSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeSnapshotRequest) ProtoMessage() {}

func (x *CreateVolumeSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateVolumeSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{38}
}

func (x *CreateVolumeSnapshotRequest) GetVolumeSnapshot() *VolumeSnapshot {
	if x != nil {
		return x.VolumeSnapshot
	}
	return nil
}

type CreateVolumeSnapshotResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	VolumeSnapshot *VolumeSnapshot        `protobuf:"bytes,1,opt,name=volume_snapshot,json=volumeSnapshot,proto3" json:"volume_snapshot,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateVolumeSnapshotResponse) Reset() {
	*x = CreateVolumeSnapshotResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVolumeSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeSnapshotResponse) ProtoMessage() {}

func (x *CreateVolumeSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateVolumeSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{39}
}

func (x *CreateVolumeSnapshotResponse) GetVolumeSnapshot() *VolumeSnapshot {
	if x != nil {
		return x.VolumeSnapshot
	}
	return nil
}

type DeleteVolumeSnapshotRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VolumeSnapshotId string                 `protobuf:"bytes,1,opt,name=volume_snapshot_id,json=volumeSnapshotId,proto3" json:"volume_snapshot_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeleteVolumeSnapshotRequest) Reset() {
	*x = DeleteVolumeSnapshotRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVolumeSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeSnapshotRequest) ProtoMessage() {}

func (x *DeleteVolumeSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteVolumeSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteVolumeSnapshotRequest) GetVolumeSnapshotId() string {
	if x != nil {
		return x.VolumeSnapshotId
	}
	return ""
}

type DeleteVolumeSnapshotResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVolumeSnapshotResponse) Reset() {
	*x = DeleteVolumeSnapshotResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVolumeSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeSnapshotResponse) ProtoMessage() {}

func (x *DeleteVolumeSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DeleteVolumeSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{41}
}

type ListVolumeSnapshotContentsRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Filter        *VolumeSnapshotContentFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVolumeSnapshotContentsRequest) Reset() {
	*x = ListVolumeSnapshotContentsRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVolumeSnapshotContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeSnapshotContentsRequest) ProtoMessage() {}

func (x *ListVolumeSnapshotContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeSnapshotContentsRequest.ProtoReflect.Descriptor instead.
func (*ListVolumeSnapshotContentsRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{42}
}

func (x *ListVolumeSnapshotContentsRequest) GetFilter() *VolumeSnapshotContentFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListVolumeSnapshotContentsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	VolumeSnapshot []*VolumeSnapshot      `protobuf:"bytes,1,rep,name=volume_snapshot,json=volumeSnapshot,proto3" json:"volume_snapshot,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListVolumeSnapshotContentsResponse) Reset() {
	*x = ListVolumeSnapshotContentsResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVolumeSnapshotContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeSnapshotContentsResponse) ProtoMessage() {}

func (x *ListVolumeSnapshotContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeSnapshotContentsResponse.ProtoReflect.Descriptor instead.
func (*ListVolumeSnapshotContentsResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{43}
}

func (x *ListVolumeSnapshotContentsResponse) GetVolumeSnapshot() []*VolumeSnapshot {
	if x != nil {
		return x.VolumeSnapshot
	}
	return nil
}

type DeleteVolumeSnapshotContentRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VolumeSnapshotId string                 `protobuf:"bytes,1,opt,name=volume_snapshot_id,json=volumeSnapshotId,proto3" json:"volume_snapshot_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeleteVolumeSnapshotContentRequest) Reset() {
	*x = DeleteVolumeSnapshotContentRequest{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVolumeSnapshotContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeSnapshotContentRequest) ProtoMessage() {}

func (x *DeleteVolumeSnapshotContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeSnapshotContentRequest.ProtoReflect.Descriptor instead.
func (*DeleteVolumeSnapshotContentRequest) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteVolumeSnapshotContentRequest) GetVolumeSnapshotId() string {
	if x != nil {
		return x.VolumeSnapshotId
	}
	return ""
}

type DeleteVolumeSnapshotContentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVolumeSnapshotContentResponse) Reset() {
	*x = DeleteVolumeSnapshotContentResponse{}
	mi := &file_volume_v1alpha1_api_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVolumeSnapshotContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeSnapshotContentResponse) ProtoMessage() {}

func (x *DeleteVolumeSnapshotContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volume_v1alpha1_api_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeSnapshotContentResponse.ProtoReflect.Descriptor instead.
func (*DeleteVolumeSnapshotContentResponse) Descriptor() ([]byte, []int) {
	return file_volume_v1alpha1_api_proto_rawDescGZIP(), []int{45}
}

var File_volume_v1alpha1_api_proto protoreflect.FileDescriptor

const file_volume_v1alpha1_api_proto_rawDesc = "" +
	"\n" +
	"\x19volume/v1alpha1/api.proto\x12\x0fvolume.v1alpha1\x1a\x17meta/v1alpha1/api.proto\x1a\x18event/v1alpha1/api.proto\"\xb9\x01\n" +
	"\fVolumeFilter\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12W\n" +
	"\x0elabel_selector\x18\x02 \x03(\v20.volume.v1alpha1.VolumeFilter.LabelSelectorEntryR\rlabelSelector\x1a@\n" +
	"\x12LabelSelectorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x87\x02\n" +
	"\vEventFilter\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12V\n" +
	"\x0elabel_selector\x18\x02 \x03(\v2/.volume.v1alpha1.EventFilter.LabelSelectorEntryR\rlabelSelector\x12(\n" +
	"\x10events_from_time\x18\x03 \x01(\x03R\x0eeventsFromTime\x12$\n" +
	"\x0eevents_to_time\x18\x04 \x01(\x03R\feventsToTime\x1a@\n" +
	"\x12LabelSelectorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"6\n" +
	"\x0fVolumeResources\x12#\n" +
	"\rstorage_bytes\x18\x01 \x01(\x03R\fstorageBytes\"\xa1\x01\n" +
	"\x0eEncryptionSpec\x12P\n" +
	"\vsecret_data\x18\x01 \x03(\v2/.volume.v1alpha1.EncryptionSpec.SecretDataEntryR\n" +
	"secretData\x1a=\n" +
	"\x0fSecretDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"'\n" +
	"\x0fImageDataSource\x12\x14\n" +
	"\x05image\x18\x01 \x01(\tR\x05image\"5\n" +
	"\x12SnapshotDataSource\x12\x1f\n" +
	"\vsnapshot_id\x18\x01 \x01(\tR\n" +
	"snapshotId\"\xb7\x01\n" +
	"\x10VolumeDataSource\x12L\n" +
	"\x11image_data_source\x18\x01 \x01(\v2 .volume.v1alpha1.ImageDataSourceR\x0fimageDataSource\x12U\n" +
	"\x14snapshot_data_source\x18\x02 \x01(\v2#.volume.v1alpha1.SnapshotDataSourceR\x12snapshotDataSource\"\x8a\x02\n" +
	"\n" +
	"VolumeSpec\x12\x14\n" +
	"\x05image\x18\x01 \x01(\tR\x05image\x12\x14\n" +
	"\x05class\x18\x02 \x01(\tR\x05class\x12>\n" +
	"\tresources\x18\x03 \x01(\v2 .volume.v1alpha1.VolumeResourcesR\tresources\x12?\n" +
	"\n" +
	"encryption\x18\x04 \x01(\v2\x1f.volume.v1alpha1.EncryptionSpecR\n" +
	"encryption\x12O\n" +
	"\x12volume_data_source\x18\x05 \x01(\v2!.volume.v1alpha1.VolumeDataSourceR\x10volumeDataSource\"\xb9\x01\n" +
	"\fVolumeStatus\x122\n" +
	"\x05state\x18\x01 \x01(\x0e2\x1c.volume.v1alpha1.VolumeStateR\x05state\x125\n" +
	"\x06access\x18\x02 \x01(\v2\x1d.volume.v1alpha1.VolumeAccessR\x06access\x12>\n" +
	"\tresources\x18\x03 \x01(\v2 .volume.v1alpha1.VolumeResourcesR\tresources\"\xab\x01\n" +
	"\x06Volume\x129\n" +
	"\bmetadata\x18\x01 \x01(\v2\x1d.meta.v1alpha1.ObjectMetadataR\bmetadata\x12/\n" +
	"\x04spec\x18\x02 \x01(\v2\x1b.volume.v1alpha1.VolumeSpecR\x04spec\x125\n" +
	"\x06status\x18\x03 \x01(\v2\x1d.volume.v1alpha1.VolumeStatusR\x06status\"?\n" +
	"\x17VolumeClassCapabilities\x12\x10\n" +
	"\x03tps\x18\x01 \x01(\x03R\x03tps\x12\x12\n" +
	"\x04iops\x18\x02 \x01(\x03R\x04iops\"o\n" +
	"\vVolumeClass\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12L\n" +
	"\fcapabilities\x18\x02 \x01(\v2(.volume.v1alpha1.VolumeClassCapabilitiesR\fcapabilities\"p\n" +
	"\x11VolumeClassStatus\x12?\n" +
	"\fvolume_class\x18\x01 \x01(\v2\x1c.volume.v1alpha1.VolumeClassR\vvolumeClass\x12\x1a\n" +
	"\bquantity\x18\x02 \x01(\x03R\bquantity\"\xdb\x02\n" +
	"\fVolumeAccess\x12\x16\n" +
	"\x06driver\x18\x01 \x01(\tR\x06driver\x12\x16\n" +
	"\x06handle\x18\x02 \x01(\tR\x06handle\x12M\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2-.volume.v1alpha1.VolumeAccess.AttributesEntryR\n" +
	"attributes\x12N\n" +
	"\vsecret_data\x18\x04 \x03(\v2-.volume.v1alpha1.VolumeAccess.SecretDataEntryR\n" +
	"secretData\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fSecretDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"I\n" +
	"\x11ListEventsRequest\x124\n" +
	"\x06filter\x18\x01 \x01(\v2\x1c.volume.v1alpha1.EventFilterR\x06filter\"C\n" +
	"\x12ListEventsResponse\x12-\n" +
	"\x06events\x18\x01 \x03(\v2\x15.event.v1alpha1.EventR\x06events\"*\n" +
	"\x0eVersionRequest\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\"]\n" +
	"\x0fVersionResponse\x12!\n" +
	"\fruntime_name\x18\x01 \x01(\tR\vruntimeName\x12'\n" +
	"\x0fruntime_version\x18\x02 \x01(\tR\x0eruntimeVersion\"K\n" +
	"\x12ListVolumesRequest\x125\n" +
	"\x06filter\x18\x01 \x01(\v2\x1d.volume.v1alpha1.VolumeFilterR\x06filter\"H\n" +
	"\x13ListVolumesResponse\x121\n" +
	"\avolumes\x18\x01 \x03(\v2\x17.volume.v1alpha1.VolumeR\avolumes\"F\n" +
	"\x13CreateVolumeRequest\x12/\n" +
	"\x06volume\x18\x01 \x01(\v2\x17.volume.v1alpha1.VolumeR\x06volume\"r\n" +
	"\x13ExpandVolumeRequest\x12\x1b\n" +
	"\tvolume_id\x18\x01 \x01(\tR\bvolumeId\x12>\n" +
	"\tresources\x18\x02 \x01(\v2 .volume.v1alpha1.VolumeResourcesR\tresources\"G\n" +
	"\x14CreateVolumeResponse\x12/\n" +
	"\x06volume\x18\x01 \x01(\v2\x17.volume.v1alpha1.VolumeR\x06volume\"\x16\n" +
	"\x14ExpandVolumeResponse\"2\n" +
	"\x13DeleteVolumeRequest\x12\x1b\n" +
	"\tvolume_id\x18\x01 \x01(\tR\bvolumeId\"\x16\n" +
	"\x14DeleteVolumeResponse\"\x0f\n" +
	"\rStatusRequest\"d\n" +
	"\x0eStatusResponse\x12R\n" +
	"\x13volume_class_status\x18\x01 \x03(\v2\".volume.v1alpha1.VolumeClassStatusR\x11volumeClassStatus\"1\n" +
	"\x12VolumeSnapshotSpec\x12\x1b\n" +
	"\tvolume_id\x18\x01 \x01(\tR\bvolumeId\"u\n" +
	"\x14VolumeSnapshotStatus\x12:\n" +
	"\x05state\x18\x01 \x01(\x0e2$.volume.v1alpha1.VolumeSnapshotStateR\x05state\x12!\n" +
	"\frestore_size\x18\x02 \x01(\x03R\vrestoreSize\"\xc3\x01\n" +
	"\x0eVolumeSnapshot\x129\n" +
	"\bmetadata\x18\x01 \x01(\v2\x1d.meta.v1alpha1.ObjectMetadataR\bmetadata\x127\n" +
	"\x04spec\x18\x02 \x01(\v2#.volume.v1alpha1.VolumeSnapshotSpecR\x04spec\x12=\n" +
	"\x06status\x18\x03 \x01(\v2%.volume.v1alpha1.VolumeSnapshotStatusR\x06status\"R\n" +
	"\fUIDReference\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\tR\x03uid\"\x93\x01\n" +
	"\x19VolumeSnapshotContentSpec\x124\n" +
	"\x16volume_snapshot_handle\x18\x01 \x01(\tR\x14volumeSnapshotHandle\x12@\n" +
	"\fsnapshot_ref\x18\x02 \x01(\v2\x1d.volume.v1alpha1.UIDReferenceR\vsnapshotRef\"\x92\x01\n" +
	"\x15VolumeSnapshotContent\x129\n" +
	"\bmetadata\x18\x01 \x01(\v2\x1d.meta.v1alpha1.ObjectMetadataR\bmetadata\x12>\n" +
	"\x04spec\x18\x02 \x01(\v2*.volume.v1alpha1.VolumeSnapshotContentSpecR\x04spec\"\xc9\x01\n" +
	"\x14VolumeSnapshotFilter\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12_\n" +
	"\x0elabel_selector\x18\x02 \x03(\v28.volume.v1alpha1.VolumeSnapshotFilter.LabelSelectorEntryR\rlabelSelector\x1a@\n" +
	"\x12LabelSelectorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd7\x01\n" +
	"\x1bVolumeSnapshotContentFilter\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12f\n" +
	"\x0elabel_selector\x18\x02 \x03(\v2?.volume.v1alpha1.VolumeSnapshotContentFilter.LabelSelectorEntryR\rlabelSelector\x1a@\n" +
	"\x12LabelSelectorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"[\n" +
	"\x1aListVolumeSnapshotsRequest\x12=\n" +
	"\x06filter\x18\x01 \x01(\v2%.volume.v1alpha1.VolumeSnapshotFilterR\x06filter\"i\n" +
	"\x1bListVolumeSnapshotsResponse\x12J\n" +
	"\x10volume_snapshots\x18\x01 \x03(\v2\x1f.volume.v1alpha1.VolumeSnapshotR\x0fvolumeSnapshots\"g\n" +
	"\x1bCreateVolumeSnapshotRequest\x12H\n" +
	"\x0fvolume_snapshot\x18\x01 \x01(\v2\x1f.volume.v1alpha1.VolumeSnapshotR\x0evolumeSnapshot\"h\n" +
	"\x1cCreateVolumeSnapshotResponse\x12H\n" +
	"\x0fvolume_snapshot\x18\x01 \x01(\v2\x1f.volume.v1alpha1.VolumeSnapshotR\x0evolumeSnapshot\"K\n" +
	"\x1bDeleteVolumeSnapshotRequest\x12,\n" +
	"\x12volume_snapshot_id\x18\x01 \x01(\tR\x10volumeSnapshotId\"\x1e\n" +
	"\x1cDeleteVolumeSnapshotResponse\"i\n" +
	"!ListVolumeSnapshotContentsRequest\x12D\n" +
	"\x06filter\x18\x01 \x01(\v2,.volume.v1alpha1.VolumeSnapshotContentFilterR\x06filter\"n\n" +
	"\"ListVolumeSnapshotContentsResponse\x12H\n" +
	"\x0fvolume_snapshot\x18\x01 \x03(\v2\x1f.volume.v1alpha1.VolumeSnapshotR\x0evolumeSnapshot\"R\n" +
	"\"DeleteVolumeSnapshotContentRequest\x12,\n" +
	"\x12volume_snapshot_id\x18\x01 \x01(\tR\x10volumeSnapshotId\"%\n" +
	"#DeleteVolumeSnapshotContentResponse*I\n" +
	"\vVolumeState\x12\x12\n" +
	"\x0eVOLUME_PENDING\x10\x00\x12\x14\n" +
	"\x10VOLUME_AVAILABLE\x10\x01\x12\x10\n" +
	"\fVOLUME_ERROR\x10\x02*i\n" +
	"\x13VolumeSnapshotState\x12\x1b\n" +
	"\x17VOLUME_SNAPSHOT_PENDING\x10\x00\x12\x19\n" +
	"\x15VOLUME_SNAPSHOT_READY\x10\x01\x12\x1a\n" +
	"\x16VOLUME_SNAPSHOT_FAILED\x10\x022\xf7\t\n" +
	"\rVolumeRuntime\x12N\n" +
	"\aVersion\x12\x1f.volume.v1alpha1.VersionRequest\x1a .volume.v1alpha1.VersionResponse\"\x00\x12W\n" +
	"\n" +
	"ListEvents\x12\".volume.v1alpha1.ListEventsRequest\x1a#.volume.v1alpha1.ListEventsResponse\"\x00\x12Z\n" +
	"\vListVolumes\x12#.volume.v1alpha1.ListVolumesRequest\x1a$.volume.v1alpha1.ListVolumesResponse\"\x00\x12]\n" +
	"\fCreateVolume\x12$.volume.v1alpha1.CreateVolumeRequest\x1a%.volume.v1alpha1.CreateVolumeResponse\"\x00\x12]\n" +
	"\fExpandVolume\x12$.volume.v1alpha1.ExpandVolumeRequest\x1a%.volume.v1alpha1.ExpandVolumeResponse\"\x00\x12]\n" +
	"\fDeleteVolume\x12$.volume.v1alpha1.DeleteVolumeRequest\x1a%.volume.v1alpha1.DeleteVolumeResponse\"\x00\x12u\n" +
	"\x14CreateVolumeSnapshot\x12,.volume.v1alpha1.CreateVolumeSnapshotRequest\x1a-.volume.v1alpha1.CreateVolumeSnapshotResponse\"\x00\x12u\n" +
	"\x14DeleteVolumeSnapshot\x12,.volume.v1alpha1.DeleteVolumeSnapshotRequest\x1a-.volume.v1alpha1.DeleteVolumeSnapshotResponse\"\x00\x12r\n" +
	"\x13ListVolumeSnapshots\x12+.volume.v1alpha1.ListVolumeSnapshotsRequest\x1a,.volume.v1alpha1.ListVolumeSnapshotsResponse\"\x00\x12\x87\x01\n" +
	"\x1aListVolumeSnapshotContents\x122.volume.v1alpha1.ListVolumeSnapshotContentsRequest\x1a3.volume.v1alpha1.ListVolumeSnapshotContentsResponse\"\x00\x12\x8a\x01\n" +
	"\x1bDeleteVolumeSnapshotContent\x123.volume.v1alpha1.DeleteVolumeSnapshotContentRequest\x1a4.volume.v1alpha1.DeleteVolumeSnapshotContentResponse\"\x00\x12K\n" +
	"\x06Status\x12\x1e.volume.v1alpha1.StatusRequest\x1a\x1f.volume.v1alpha1.StatusResponse\"\x00B;Z9github.com/ironcore-dev/ironcore/iri/apis/volume/v1alpha1b\x06proto3"

var (
	file_volume_v1alpha1_api_proto_rawDescOnce sync.Once
	file_volume_v1alpha1_api_proto_rawDescData []byte
)

func file_volume_v1alpha1_api_proto_rawDescGZIP() []byte {
	file_volume_v1alpha1_api_proto_rawDescOnce.Do(func() {
		file_volume_v1alpha1_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_volume_v1alpha1_api_proto_rawDesc), len(file_volume_v1alpha1_api_proto_rawDesc)))
	})
	return file_volume_v1alpha1_api_proto_rawDescData
}

var file_volume_v1alpha1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_volume_v1alpha1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_volume_v1alpha1_api_proto_goTypes = []any{
	(VolumeState)(0),                            // 0: volume.v1alpha1.VolumeState
	(VolumeSnapshotState)(0),                    // 1: volume.v1alpha1.VolumeSnapshotState
	(*VolumeFilter)(nil),                        // 2: volume.v1alpha1.VolumeFilter
	(*EventFilter)(nil),                         // 3: volume.v1alpha1.EventFilter
	(*VolumeResources)(nil),                     // 4: volume.v1alpha1.VolumeResources
	(*EncryptionSpec)(nil),                      // 5: volume.v1alpha1.EncryptionSpec
	(*ImageDataSource)(nil),                     // 6: volume.v1alpha1.ImageDataSource
	(*SnapshotDataSource)(nil),                  // 7: volume.v1alpha1.SnapshotDataSource
	(*VolumeDataSource)(nil),                    // 8: volume.v1alpha1.VolumeDataSource
	(*VolumeSpec)(nil),                          // 9: volume.v1alpha1.VolumeSpec
	(*VolumeStatus)(nil),                        // 10: volume.v1alpha1.VolumeStatus
	(*Volume)(nil),                              // 11: volume.v1alpha1.Volume
	(*VolumeClassCapabilities)(nil),             // 12: volume.v1alpha1.VolumeClassCapabilities
	(*VolumeClass)(nil),                         // 13: volume.v1alpha1.VolumeClass
	(*VolumeClassStatus)(nil),                   // 14: volume.v1alpha1.VolumeClassStatus
	(*VolumeAccess)(nil),                        // 15: volume.v1alpha1.VolumeAccess
	(*ListEventsRequest)(nil),                   // 16: volume.v1alpha1.ListEventsRequest
	(*ListEventsResponse)(nil),                  // 17: volume.v1alpha1.ListEventsResponse
	(*VersionRequest)(nil),                      // 18: volume.v1alpha1.VersionRequest
	(*VersionResponse)(nil),                     // 19: volume.v1alpha1.VersionResponse
	(*ListVolumesRequest)(nil),                  // 20: volume.v1alpha1.ListVolumesRequest
	(*ListVolumesResponse)(nil),                 // 21: volume.v1alpha1.ListVolumesResponse
	(*CreateVolumeRequest)(nil),                 // 22: volume.v1alpha1.CreateVolumeRequest
	(*ExpandVolumeRequest)(nil),                 // 23: volume.v1alpha1.ExpandVolumeRequest
	(*CreateVolumeResponse)(nil),                // 24: volume.v1alpha1.CreateVolumeResponse
	(*ExpandVolumeResponse)(nil),                // 25: volume.v1alpha1.ExpandVolumeResponse
	(*DeleteVolumeRequest)(nil),                 // 26: volume.v1alpha1.DeleteVolumeRequest
	(*DeleteVolumeResponse)(nil),                // 27: volume.v1alpha1.DeleteVolumeResponse
	(*StatusRequest)(nil),                       // 28: volume.v1alpha1.StatusRequest
	(*StatusResponse)(nil),                      // 29: volume.v1alpha1.StatusResponse
	(*VolumeSnapshotSpec)(nil),                  // 30: volume.v1alpha1.VolumeSnapshotSpec
	(*VolumeSnapshotStatus)(nil),                // 31: volume.v1alpha1.VolumeSnapshotStatus
	(*VolumeSnapshot)(nil),                      // 32: volume.v1alpha1.VolumeSnapshot
	(*UIDReference)(nil),                        // 33: volume.v1alpha1.UIDReference
	(*VolumeSnapshotContentSpec)(nil),           // 34: volume.v1alpha1.VolumeSnapshotContentSpec
	(*VolumeSnapshotContent)(nil),               // 35: volume.v1alpha1.VolumeSnapshotContent
	(*VolumeSnapshotFilter)(nil),                // 36: volume.v1alpha1.VolumeSnapshotFilter
	(*VolumeSnapshotContentFilter)(nil),         // 37: volume.v1alpha1.VolumeSnapshotContentFilter
	(*ListVolumeSnapshotsRequest)(nil),          // 38: volume.v1alpha1.ListVolumeSnapshotsRequest
	(*ListVolumeSnapshotsResponse)(nil),         // 39: volume.v1alpha1.ListVolumeSnapshotsResponse
	(*CreateVolumeSnapshotRequest)(nil),         // 40: volume.v1alpha1.CreateVolumeSnapshotRequest
	(*CreateVolumeSnapshotResponse)(nil),        // 41: volume.v1alpha1.CreateVolumeSnapshotResponse
	(*DeleteVolumeSnapshotRequest)(nil),         // 42: volume.v1alpha1.DeleteVolumeSnapshotRequest
	(*DeleteVolumeSnapshotResponse)(nil),        // 43: volume.v1alpha1.DeleteVolumeSnapshotResponse
	(*ListVolumeSnapshotContentsRequest)(nil),   // 44: volume.v1alpha1.ListVolumeSnapshotContentsRequest
	(*ListVolumeSnapshotContentsResponse)(nil),  // 45: volume.v1alpha1.ListVolumeSnapshotContentsResponse
	(*DeleteVolumeSnapshotContentRequest)(nil),  // 46: volume.v1alpha1.DeleteVolumeSnapshotContentRequest
	(*DeleteVolumeSnapshotContentResponse)(nil), // 47: volume.v1alpha1.DeleteVolumeSnapshotContentResponse
	nil,                             // 48: volume.v1alpha1.VolumeFilter.LabelSelectorEntry
	nil,                             // 49: volume.v1alpha1.EventFilter.LabelSelectorEntry
	nil,                             // 50: volume.v1alpha1.EncryptionSpec.SecretDataEntry
	nil,                             // 51: volume.v1alpha1.VolumeAccess.AttributesEntry
	nil,                             // 52: volume.v1alpha1.VolumeAccess.SecretDataEntry
	nil,                             // 53: volume.v1alpha1.VolumeSnapshotFilter.LabelSelectorEntry
	nil,                             // 54: volume.v1alpha1.VolumeSnapshotContentFilter.LabelSelectorEntry
	(*v1alpha1.ObjectMetadata)(nil), // 55: meta.v1alpha1.ObjectMetadata
	(*v1alpha11.Event)(nil),         // 56: event.v1alpha1.Event
}
var file_volume_v1alpha1_api_proto_depIdxs = []int32{
	48, // 0: volume.v1alpha1.VolumeFilter.label_selector:type_name -> volume.v1alpha1.VolumeFilter.LabelSelectorEntry
	49, // 1: volume.v1alpha1.EventFilter.label_selector:type_name -> volume.v1alpha1.EventFilter.LabelSelectorEntry
	50, // 2: volume.v1alpha1.EncryptionSpec.secret_data:type_name -> volume.v1alpha1.EncryptionSpec.SecretDataEntry
	6,  // 3: volume.v1alpha1.VolumeDataSource.image_data_source:type_name -> volume.v1alpha1.ImageDataSource
	7,  // 4: volume.v1alpha1.VolumeDataSource.snapshot_data_source:type_name -> volume.v1alpha1.SnapshotDataSource
	4,  // 5: volume.v1alpha1.VolumeSpec.resources:type_name -> volume.v1alpha1.VolumeResources
	5,  // 6: volume.v1alpha1.VolumeSpec.encryption:type_name -> volume.v1alpha1.EncryptionSpec
	8,  // 7: volume.v1alpha1.VolumeSpec.volume_data_source:type_name -> volume.v1alpha1.VolumeDataSource
	0,  // 8: volume.v1alpha1.VolumeStatus.state:type_name -> volume.v1alpha1.VolumeState
	15, // 9: volume.v1alpha1.VolumeStatus.access:type_name -> volume.v1alpha1.VolumeAccess
	4,  // 10: volume.v1alpha1.VolumeStatus.resources:type_name -> volume.v1alpha1.VolumeResources
	55, // 11: volume.v1alpha1.Volume.metadata:type_name -> meta.v1alpha1.ObjectMetadata
	9,  // 12: volume.v1alpha1.Volume.spec:type_name -> volume.v1alpha1.VolumeSpec
	10, // 13: volume.v1alpha1.Volume.status:type_name -> volume.v1alpha1.VolumeStatus
	12, // 14: volume.v1alpha1.VolumeClass.capabilities:type_name -> volume.v1alpha1.VolumeClassCapabilities
	13, // 15: volume.v1alpha1.VolumeClassStatus.volume_class:type_name -> volume.v1alpha1.VolumeClass
	51, // 16: volume.v1alpha1.VolumeAccess.attributes:type_name -> volume.v1alpha1.VolumeAccess.AttributesEntry
	52, // 17: volume.v1alpha1.VolumeAccess.secret_data:type_name -> volume.v1alpha1.VolumeAccess.SecretDataEntry
	3,  // 18: volume.v1alpha1.ListEventsRequest.filter:type_name -> volume.v1alpha1.EventFilter
	56, // 19: volume.v1alpha1.ListEventsResponse.events:type_name -> event.v1alpha1.Event
	2,  // 20: volume.v1alpha1.ListVolumesRequest.filter:type_name -> volume.v1alpha1.VolumeFilter
	11, // 21: volume.v1alpha1.ListVolumesResponse.volumes:type_name -> volume.v1alpha1.Volume
	11, // 22: volume.v1alpha1.CreateVolumeRequest.volume:type_name -> volume.v1alpha1.Volume
	4,  // 23: volume.v1alpha1.ExpandVolumeRequest.resources:type_name -> volume.v1alpha1.VolumeResources
	11, // 24: volume.v1alpha1.CreateVolumeResponse.volume:type_name -> volume.v1alpha1.Volume
	14, // 25: volume.v1alpha1.StatusResponse.volume_class_status:type_name -> volume.v1alpha1.VolumeClassStatus
	1,  // 26: volume.v1alpha1.VolumeSnapshotStatus.state:type_name -> volume.v1alpha1.VolumeSnapshotState
	55, // 27: volume.v1alpha1.VolumeSnapshot.metadata:type_name -> meta.v1alpha1.ObjectMetadata
	30, // 28: volume.v1alpha1.VolumeSnapshot.spec:type_name -> volume.v1alpha1.VolumeSnapshotSpec
	31, // 29: volume.v1alpha1.VolumeSnapshot.status:type_name -> volume.v1alpha1.VolumeSnapshotStatus
	33, // 30: volume.v1alpha1.VolumeSnapshotContentSpec.snapshot_ref:type_name -> volume.v1alpha1.UIDReference
	55, // 31: volume.v1alpha1.VolumeSnapshotContent.metadata:type_name -> meta.v1alpha1.ObjectMetadata
	34, // 32: volume.v1alpha1.VolumeSnapshotContent.spec:type_name -> volume.v1alpha1.VolumeSnapshotContentSpec
	53, // 33: volume.v1alpha1.VolumeSnapshotFilter.label_selector:type_name -> volume.v1alpha1.VolumeSnapshotFilter.LabelSelectorEntry
	54, // 34: volume.v1alpha1.VolumeSnapshotContentFilter.label_selector:type_name -> volume.v1alpha1.VolumeSnapshotContentFilter.LabelSelectorEntry
	36, // 35: volume.v1alpha1.ListVolumeSnapshotsRequest.filter:type_name -> volume.v1alpha1.VolumeSnapshotFilter
	32, // 36: volume.v1alpha1.ListVolumeSnapshotsResponse.volume_snapshots:type_name -> volume.v1alpha1.VolumeSnapshot
	32, // 37: volume.v1alpha1.CreateVolumeSnapshotRequest.volume_snapshot:type_name -> volume.v1alpha1.VolumeSnapshot
	32, // 38: volume.v1alpha1.CreateVolumeSnapshotResponse.volume_snapshot:type_name -> volume.v1alpha1.VolumeSnapshot
	37, // 39: volume.v1alpha1.ListVolumeSnapshotContentsRequest.filter:type_name -> volume.v1alpha1.VolumeSnapshotContentFilter
	32, // 40: volume.v1alpha1.ListVolumeSnapshotContentsResponse.volume_snapshot:type_name -> volume.v1alpha1.VolumeSnapshot
	18, // 41: volume.v1alpha1.VolumeRuntime.Version:input_type -> volume.v1alpha1.VersionRequest
	16, // 42: volume.v1alpha1.VolumeRuntime.ListEvents:input_type -> volume.v1alpha1.ListEventsRequest
	20, // 43: volume.v1alpha1.VolumeRuntime.ListVolumes:input_type -> volume.v1alpha1.ListVolumesRequest
	22, // 44: volume.v1alpha1.VolumeRuntime.CreateVolume:input_type -> volume.v1alpha1.CreateVolumeRequest
	23, // 45: volume.v1alpha1.VolumeRuntime.ExpandVolume:input_type -> volume.v1alpha1.ExpandVolumeRequest
	26, // 46: volume.v1alpha1.VolumeRuntime.DeleteVolume:input_type -> volume.v1alpha1.DeleteVolumeRequest
	40, // 47: volume.v1alpha1.VolumeRuntime.CreateVolumeSnapshot:input_type -> volume.v1alpha1.CreateVolumeSnapshotRequest
	42, // 48: volume.v1alpha1.VolumeRuntime.DeleteVolumeSnapshot:input_type -> volume.v1alpha1.DeleteVolumeSnapshotRequest
	38, // 49: volume.v1alpha1.VolumeRuntime.ListVolumeSnapshots:input_type -> volume.v1alpha1.ListVolumeSnapshotsRequest
	44, // 50: volume.v1alpha1.VolumeRuntime.ListVolumeSnapshotContents:input_type -> volume.v1alpha1.ListVolumeSnapshotContentsRequest
	46, // 51: volume.v1alpha1.VolumeRuntime.DeleteVolumeSnapshotContent:input_type -> volume.v1alpha1.DeleteVolumeSnapshotContentRequest
	28, // 52: volume.v1alpha1.VolumeRuntime.Status:input_type -> volume.v1alpha1.StatusRequest
	19, // 53: volume.v1alpha1.VolumeRuntime.Version:output_type -> volume.v1alpha1.VersionResponse
	17, // 54: volume.v1alpha1.VolumeRuntime.ListEvents:output_type -> volume.v1alpha1.ListEventsResponse
	21, // 55: volume.v1alpha1.VolumeRuntime.ListVolumes:output_type -> volume.v1alpha1.ListVolumesResponse
	24, // 56: volume.v1alpha1.VolumeRuntime.CreateVolume:output_type -> volume.v1alpha1.CreateVolumeResponse
	25, // 57: volume.v1alpha1.VolumeRuntime.ExpandVolume:output_type -> volume.v1alpha1.ExpandVolumeResponse
	27, // 58: volume.v1alpha1.VolumeRuntime.DeleteVolume:output_type -> volume.v1alpha1.DeleteVolumeResponse
	41, // 59: volume.v1alpha1.VolumeRuntime.CreateVolumeSnapshot:output_type -> volume.v1alpha1.CreateVolumeSnapshotResponse
	43, // 60: volume.v1alpha1.VolumeRuntime.DeleteVolumeSnapshot:output_type -> volume.v1alpha1.DeleteVolumeSnapshotResponse
	39, // 61: volume.v1alpha1.VolumeRuntime.ListVolumeSnapshots:output_type -> volume.v1alpha1.ListVolumeSnapshotsResponse
	45, // 62: volume.v1alpha1.VolumeRuntime.ListVolumeSnapshotContents:output_type -> volume.v1alpha1.ListVolumeSnapshotContentsResponse
	47, // 63: volume.v1alpha1.VolumeRuntime.DeleteVolumeSnapshotContent:output_type -> volume.v1alpha1.DeleteVolumeSnapshotContentResponse
	29, // 64: volume.v1alpha1.VolumeRuntime.Status:output_type -> volume.v1alpha1.StatusResponse
	53, // [53:65] is the sub-list for method output_type
	41, // [41:53] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_volume_v1alpha1_api_proto_init() }
func file_volume_v1alpha1_api_proto_init() {
	if File_volume_v1alpha1_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_volume_v1alpha1_api_proto_rawDesc), len(file_volume_v1alpha1_api_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_volume_v1alpha1_api_proto_goTypes,
		DependencyIndexes: file_volume_v1alpha1_api_proto_depIdxs,
		EnumInfos:         file_volume_v1alpha1_api_proto_enumTypes,
		MessageInfos:      file_volume_v1alpha1_api_proto_msgTypes,
	}.Build()
	File_volume_v1alpha1_api_proto = out.File
	file_volume_v1alpha1_api_proto_goTypes = nil
	file_volume_v1alpha1_api_proto_depIdxs = nil
}
