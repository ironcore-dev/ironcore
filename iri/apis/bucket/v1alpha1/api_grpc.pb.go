// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bucket/v1alpha1/api.proto

package v1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BucketRuntime_ListEvents_FullMethodName        = "/bucket.v1alpha1.BucketRuntime/ListEvents"
	BucketRuntime_ListBuckets_FullMethodName       = "/bucket.v1alpha1.BucketRuntime/ListBuckets"
	BucketRuntime_CreateBucket_FullMethodName      = "/bucket.v1alpha1.BucketRuntime/CreateBucket"
	BucketRuntime_DeleteBucket_FullMethodName      = "/bucket.v1alpha1.BucketRuntime/DeleteBucket"
	BucketRuntime_ListBucketClasses_FullMethodName = "/bucket.v1alpha1.BucketRuntime/ListBucketClasses"
)

// BucketRuntimeClient is the client API for BucketRuntime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketRuntimeClient interface {
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
	DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error)
	ListBucketClasses(ctx context.Context, in *ListBucketClassesRequest, opts ...grpc.CallOption) (*ListBucketClassesResponse, error)
}

type bucketRuntimeClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketRuntimeClient(cc grpc.ClientConnInterface) BucketRuntimeClient {
	return &bucketRuntimeClient{cc}
}

func (c *bucketRuntimeClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, BucketRuntime_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketRuntimeClient) ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketsResponse)
	err := c.cc.Invoke(ctx, BucketRuntime_ListBuckets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketRuntimeClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, BucketRuntime_CreateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketRuntimeClient) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBucketResponse)
	err := c.cc.Invoke(ctx, BucketRuntime_DeleteBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketRuntimeClient) ListBucketClasses(ctx context.Context, in *ListBucketClassesRequest, opts ...grpc.CallOption) (*ListBucketClassesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketClassesResponse)
	err := c.cc.Invoke(ctx, BucketRuntime_ListBucketClasses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketRuntimeServer is the server API for BucketRuntime service.
// All implementations must embed UnimplementedBucketRuntimeServer
// for forward compatibility.
type BucketRuntimeServer interface {
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error)
	ListBucketClasses(context.Context, *ListBucketClassesRequest) (*ListBucketClassesResponse, error)
	mustEmbedUnimplementedBucketRuntimeServer()
}

// UnimplementedBucketRuntimeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBucketRuntimeServer struct{}

func (UnimplementedBucketRuntimeServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedBucketRuntimeServer) ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (UnimplementedBucketRuntimeServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedBucketRuntimeServer) DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedBucketRuntimeServer) ListBucketClasses(context.Context, *ListBucketClassesRequest) (*ListBucketClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucketClasses not implemented")
}
func (UnimplementedBucketRuntimeServer) mustEmbedUnimplementedBucketRuntimeServer() {}
func (UnimplementedBucketRuntimeServer) testEmbeddedByValue()                       {}

// UnsafeBucketRuntimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketRuntimeServer will
// result in compilation errors.
type UnsafeBucketRuntimeServer interface {
	mustEmbedUnimplementedBucketRuntimeServer()
}

func RegisterBucketRuntimeServer(s grpc.ServiceRegistrar, srv BucketRuntimeServer) {
	// If the following call pancis, it indicates UnimplementedBucketRuntimeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BucketRuntime_ServiceDesc, srv)
}

func _BucketRuntime_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketRuntimeServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketRuntime_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketRuntimeServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketRuntime_ListBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketRuntimeServer).ListBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketRuntime_ListBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketRuntimeServer).ListBuckets(ctx, req.(*ListBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketRuntime_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketRuntimeServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketRuntime_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketRuntimeServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketRuntime_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketRuntimeServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketRuntime_DeleteBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketRuntimeServer).DeleteBucket(ctx, req.(*DeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketRuntime_ListBucketClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketRuntimeServer).ListBucketClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketRuntime_ListBucketClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketRuntimeServer).ListBucketClasses(ctx, req.(*ListBucketClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketRuntime_ServiceDesc is the grpc.ServiceDesc for BucketRuntime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketRuntime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bucket.v1alpha1.BucketRuntime",
	HandlerType: (*BucketRuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEvents",
			Handler:    _BucketRuntime_ListEvents_Handler,
		},
		{
			MethodName: "ListBuckets",
			Handler:    _BucketRuntime_ListBuckets_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _BucketRuntime_CreateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _BucketRuntime_DeleteBucket_Handler,
		},
		{
			MethodName: "ListBucketClasses",
			Handler:    _BucketRuntime_ListBucketClasses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bucket/v1alpha1/api.proto",
}
