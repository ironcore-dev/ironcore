syntax = "proto3";

package machine.v1alpha1;
option go_package = "github.com/ironcore-dev/ironcore/iri/apis/machine/v1alpha1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/ironcore-dev/ironcore/iri/apis/meta/v1alpha1/api.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

service MachineRuntime {
  rpc Version(VersionRequest) returns (VersionResponse) {};

  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse) {};
  rpc CreateMachine(CreateMachineRequest) returns (CreateMachineResponse) {};
  rpc DeleteMachine(DeleteMachineRequest) returns (DeleteMachineResponse) {};
  rpc UpdateMachineAnnotations(UpdateMachineAnnotationsRequest) returns (UpdateMachineAnnotationsResponse);
  rpc UpdateMachinePower(UpdateMachinePowerRequest) returns (UpdateMachinePowerResponse);
  rpc AttachVolume(AttachVolumeRequest) returns (AttachVolumeResponse) {};
  rpc DetachVolume(DetachVolumeRequest) returns (DetachVolumeResponse) {};
  rpc AttachNetworkInterface(AttachNetworkInterfaceRequest) returns (AttachNetworkInterfaceResponse);
  rpc DetachNetworkInterface(DetachNetworkInterfaceRequest) returns (DetachNetworkInterfaceResponse);

  rpc Status(StatusRequest) returns (StatusResponse);

  rpc Exec(ExecRequest) returns (ExecResponse);
}

message VolumeSpec {
  string driver = 1;
  string handle = 2;
  map<string, string> attributes = 3;
  map<string, bytes> secret_data = 4;
}

message MachineFilter {
  string id = 1;
  map<string, string> label_selector = 2;
}

message MachineClassCapabilities {
  int64 cpu_millis = 1;
  int64 memory_bytes = 2;
}

message Machine {
  meta.v1alpha1.ObjectMetadata metadata = 1;
  MachineSpec spec = 2;
  MachineStatus status = 3;
}

message ImageSpec {
  string image = 1;
}

message EmptyDisk {
  int64 size_bytes = 1;
}

message VolumeConnection {
  string driver = 1;
  string handle = 2;
  map<string, string> attributes = 3;
  map<string, bytes> secret_data = 4;
  map<string, bytes> encryption_data = 5;
}

message Volume {
  string name = 1;
  string device = 2;
  EmptyDisk empty_disk = 4;
  VolumeConnection connection = 5;
}

message NetworkInterface {
  string name = 1;
  string network_id = 2;
  repeated string ips = 3;
  map<string, string> attributes = 4;
}

enum Power {
  POWER_ON = 0;
  POWER_OFF = 1;
}

message MachineSpec {
  Power power = 1;
  ImageSpec image = 2;
  string class = 3;
  bytes ignition_data = 4;
  repeated Volume volumes = 5;
  repeated NetworkInterface network_interfaces = 6;
}

message MachineStatus {
  int64 observed_generation = 1;
  MachineState state = 2;
  string image_ref = 3;
  repeated VolumeStatus volumes = 4;
  repeated NetworkInterfaceStatus network_interfaces = 5;
}

message VolumeStatus {
  string name = 1;
  string handle = 2;
  VolumeState state = 3;
}

enum VolumeState {
  VOLUME_PENDING = 0;
  VOLUME_ATTACHED = 1;
}

message NetworkInterfaceStatus {
  string name = 1;
  string handle = 2;
  NetworkInterfaceState state = 3;
  repeated string ips = 4;
}

enum NetworkInterfaceState {
  NETWORK_INTERFACE_PENDING = 0;
  NETWORK_INTERFACE_ATTACHED = 1;
}

enum MachineState {
  MACHINE_PENDING = 0;
  MACHINE_RUNNING = 1;
  MACHINE_SUSPENDED = 2;
  MACHINE_TERMINATED = 3;
}

message MachineClass {
  string name = 1;
  MachineClassCapabilities capabilities = 2;
}

message MachineClassStatus {
  MachineClass machine_class = 1;
  int64 quantity = 2;
}

message VersionRequest {
  string version = 1;
}

message VersionResponse {
  // Name of the machine runtime.
  string runtime_name = 1;
  // Version of the machine runtime. The string must be
  // semver-compatible.
  string runtime_version = 2;
}

message ListMachinesRequest {
  MachineFilter filter = 1;
}

message ListMachinesResponse {
  repeated Machine machines = 1;
}

message CreateMachineRequest {
  Machine machine = 1;
}

message CreateMachineResponse {
  Machine machine = 1;
}

message DeleteMachineRequest {
  string machine_id = 1;
}

message DeleteMachineResponse {
}

message UpdateMachineAnnotationsRequest {
  string machine_id = 1;
  map<string, string> annotations = 2;
}

message UpdateMachineAnnotationsResponse {
}

message UpdateMachinePowerRequest {
  string machine_id = 1;
  Power power = 2;
}

message UpdateMachinePowerResponse {
}

message AttachVolumeRequest {
  string machine_id = 1;
  Volume volume = 2;
}

message AttachVolumeResponse {
}

message DetachVolumeRequest {
  string machine_id = 1;
  string name = 2;
}

message DetachVolumeResponse {
}

message AttachNetworkInterfaceRequest {
  string machine_id = 1;
  NetworkInterface network_interface = 2;
}

message AttachNetworkInterfaceResponse {
}

message DetachNetworkInterfaceRequest {
  string machine_id = 1;
  string name = 2;
}

message DetachNetworkInterfaceResponse {
}

message StatusRequest {
}

message StatusResponse {
  repeated MachineClassStatus machine_class_status = 1;
}

message ExecRequest {
  string machine_id = 1;
}

message ExecResponse {
  string url = 1;
}
