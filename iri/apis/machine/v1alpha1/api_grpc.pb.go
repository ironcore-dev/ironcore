// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: machine/v1alpha1/api.proto

package v1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MachineRuntime_Version_FullMethodName                  = "/machine.v1alpha1.MachineRuntime/Version"
	MachineRuntime_ListEvents_FullMethodName               = "/machine.v1alpha1.MachineRuntime/ListEvents"
	MachineRuntime_ListMachines_FullMethodName             = "/machine.v1alpha1.MachineRuntime/ListMachines"
	MachineRuntime_CreateMachine_FullMethodName            = "/machine.v1alpha1.MachineRuntime/CreateMachine"
	MachineRuntime_DeleteMachine_FullMethodName            = "/machine.v1alpha1.MachineRuntime/DeleteMachine"
	MachineRuntime_UpdateMachineAnnotations_FullMethodName = "/machine.v1alpha1.MachineRuntime/UpdateMachineAnnotations"
	MachineRuntime_UpdateMachinePower_FullMethodName       = "/machine.v1alpha1.MachineRuntime/UpdateMachinePower"
	MachineRuntime_AttachVolume_FullMethodName             = "/machine.v1alpha1.MachineRuntime/AttachVolume"
	MachineRuntime_DetachVolume_FullMethodName             = "/machine.v1alpha1.MachineRuntime/DetachVolume"
	MachineRuntime_AttachNetworkInterface_FullMethodName   = "/machine.v1alpha1.MachineRuntime/AttachNetworkInterface"
	MachineRuntime_DetachNetworkInterface_FullMethodName   = "/machine.v1alpha1.MachineRuntime/DetachNetworkInterface"
	MachineRuntime_Status_FullMethodName                   = "/machine.v1alpha1.MachineRuntime/Status"
	MachineRuntime_Exec_FullMethodName                     = "/machine.v1alpha1.MachineRuntime/Exec"
)

// MachineRuntimeClient is the client API for MachineRuntime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineRuntimeClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*CreateMachineResponse, error)
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error)
	UpdateMachineAnnotations(ctx context.Context, in *UpdateMachineAnnotationsRequest, opts ...grpc.CallOption) (*UpdateMachineAnnotationsResponse, error)
	UpdateMachinePower(ctx context.Context, in *UpdateMachinePowerRequest, opts ...grpc.CallOption) (*UpdateMachinePowerResponse, error)
	AttachVolume(ctx context.Context, in *AttachVolumeRequest, opts ...grpc.CallOption) (*AttachVolumeResponse, error)
	DetachVolume(ctx context.Context, in *DetachVolumeRequest, opts ...grpc.CallOption) (*DetachVolumeResponse, error)
	AttachNetworkInterface(ctx context.Context, in *AttachNetworkInterfaceRequest, opts ...grpc.CallOption) (*AttachNetworkInterfaceResponse, error)
	DetachNetworkInterface(ctx context.Context, in *DetachNetworkInterfaceRequest, opts ...grpc.CallOption) (*DetachNetworkInterfaceResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
}

type machineRuntimeClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineRuntimeClient(cc grpc.ClientConnInterface) MachineRuntimeClient {
	return &machineRuntimeClient{cc}
}

func (c *machineRuntimeClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_ListMachines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*CreateMachineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMachineResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_CreateMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMachineResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_DeleteMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) UpdateMachineAnnotations(ctx context.Context, in *UpdateMachineAnnotationsRequest, opts ...grpc.CallOption) (*UpdateMachineAnnotationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMachineAnnotationsResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_UpdateMachineAnnotations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) UpdateMachinePower(ctx context.Context, in *UpdateMachinePowerRequest, opts ...grpc.CallOption) (*UpdateMachinePowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMachinePowerResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_UpdateMachinePower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) AttachVolume(ctx context.Context, in *AttachVolumeRequest, opts ...grpc.CallOption) (*AttachVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachVolumeResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_AttachVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) DetachVolume(ctx context.Context, in *DetachVolumeRequest, opts ...grpc.CallOption) (*DetachVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetachVolumeResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_DetachVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) AttachNetworkInterface(ctx context.Context, in *AttachNetworkInterfaceRequest, opts ...grpc.CallOption) (*AttachNetworkInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_AttachNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) DetachNetworkInterface(ctx context.Context, in *DetachNetworkInterfaceRequest, opts ...grpc.CallOption) (*DetachNetworkInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetachNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_DetachNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineRuntimeClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, MachineRuntime_Exec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineRuntimeServer is the server API for MachineRuntime service.
// All implementations must embed UnimplementedMachineRuntimeServer
// for forward compatibility.
type MachineRuntimeServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	CreateMachine(context.Context, *CreateMachineRequest) (*CreateMachineResponse, error)
	DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error)
	UpdateMachineAnnotations(context.Context, *UpdateMachineAnnotationsRequest) (*UpdateMachineAnnotationsResponse, error)
	UpdateMachinePower(context.Context, *UpdateMachinePowerRequest) (*UpdateMachinePowerResponse, error)
	AttachVolume(context.Context, *AttachVolumeRequest) (*AttachVolumeResponse, error)
	DetachVolume(context.Context, *DetachVolumeRequest) (*DetachVolumeResponse, error)
	AttachNetworkInterface(context.Context, *AttachNetworkInterfaceRequest) (*AttachNetworkInterfaceResponse, error)
	DetachNetworkInterface(context.Context, *DetachNetworkInterfaceRequest) (*DetachNetworkInterfaceResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	mustEmbedUnimplementedMachineRuntimeServer()
}

// UnimplementedMachineRuntimeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMachineRuntimeServer struct{}

func (UnimplementedMachineRuntimeServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedMachineRuntimeServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedMachineRuntimeServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedMachineRuntimeServer) CreateMachine(context.Context, *CreateMachineRequest) (*CreateMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (UnimplementedMachineRuntimeServer) DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (UnimplementedMachineRuntimeServer) UpdateMachineAnnotations(context.Context, *UpdateMachineAnnotationsRequest) (*UpdateMachineAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachineAnnotations not implemented")
}
func (UnimplementedMachineRuntimeServer) UpdateMachinePower(context.Context, *UpdateMachinePowerRequest) (*UpdateMachinePowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachinePower not implemented")
}
func (UnimplementedMachineRuntimeServer) AttachVolume(context.Context, *AttachVolumeRequest) (*AttachVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachVolume not implemented")
}
func (UnimplementedMachineRuntimeServer) DetachVolume(context.Context, *DetachVolumeRequest) (*DetachVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachVolume not implemented")
}
func (UnimplementedMachineRuntimeServer) AttachNetworkInterface(context.Context, *AttachNetworkInterfaceRequest) (*AttachNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachNetworkInterface not implemented")
}
func (UnimplementedMachineRuntimeServer) DetachNetworkInterface(context.Context, *DetachNetworkInterfaceRequest) (*DetachNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachNetworkInterface not implemented")
}
func (UnimplementedMachineRuntimeServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedMachineRuntimeServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedMachineRuntimeServer) mustEmbedUnimplementedMachineRuntimeServer() {}
func (UnimplementedMachineRuntimeServer) testEmbeddedByValue()                        {}

// UnsafeMachineRuntimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineRuntimeServer will
// result in compilation errors.
type UnsafeMachineRuntimeServer interface {
	mustEmbedUnimplementedMachineRuntimeServer()
}

func RegisterMachineRuntimeServer(s grpc.ServiceRegistrar, srv MachineRuntimeServer) {
	// If the following call pancis, it indicates UnimplementedMachineRuntimeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MachineRuntime_ServiceDesc, srv)
}

func _MachineRuntime_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_ListMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_CreateMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_DeleteMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_UpdateMachineAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).UpdateMachineAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_UpdateMachineAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).UpdateMachineAnnotations(ctx, req.(*UpdateMachineAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_UpdateMachinePower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachinePowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).UpdateMachinePower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_UpdateMachinePower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).UpdateMachinePower(ctx, req.(*UpdateMachinePowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_AttachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).AttachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_AttachVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).AttachVolume(ctx, req.(*AttachVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_DetachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).DetachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_DetachVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).DetachVolume(ctx, req.(*DetachVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_AttachNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).AttachNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_AttachNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).AttachNetworkInterface(ctx, req.(*AttachNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_DetachNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).DetachNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_DetachNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).DetachNetworkInterface(ctx, req.(*DetachNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineRuntime_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineRuntimeServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineRuntime_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineRuntimeServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MachineRuntime_ServiceDesc is the grpc.ServiceDesc for MachineRuntime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineRuntime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "machine.v1alpha1.MachineRuntime",
	HandlerType: (*MachineRuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _MachineRuntime_Version_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _MachineRuntime_ListEvents_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _MachineRuntime_ListMachines_Handler,
		},
		{
			MethodName: "CreateMachine",
			Handler:    _MachineRuntime_CreateMachine_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _MachineRuntime_DeleteMachine_Handler,
		},
		{
			MethodName: "UpdateMachineAnnotations",
			Handler:    _MachineRuntime_UpdateMachineAnnotations_Handler,
		},
		{
			MethodName: "UpdateMachinePower",
			Handler:    _MachineRuntime_UpdateMachinePower_Handler,
		},
		{
			MethodName: "AttachVolume",
			Handler:    _MachineRuntime_AttachVolume_Handler,
		},
		{
			MethodName: "DetachVolume",
			Handler:    _MachineRuntime_DetachVolume_Handler,
		},
		{
			MethodName: "AttachNetworkInterface",
			Handler:    _MachineRuntime_AttachNetworkInterface_Handler,
		},
		{
			MethodName: "DetachNetworkInterface",
			Handler:    _MachineRuntime_DetachNetworkInterface_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _MachineRuntime_Status_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _MachineRuntime_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "machine/v1alpha1/api.proto",
}
