/*
 * Copyright (c) 2021 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	networking "github.com/onmetal/onmetal-api/apis/networking"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualIPRoutingLister helps list VirtualIPRoutings.
// All objects returned here must be treated as read-only.
type VirtualIPRoutingLister interface {
	// List lists all VirtualIPRoutings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*networking.VirtualIPRouting, err error)
	// VirtualIPRoutings returns an object that can list and get VirtualIPRoutings.
	VirtualIPRoutings(namespace string) VirtualIPRoutingNamespaceLister
	VirtualIPRoutingListerExpansion
}

// virtualIPRoutingLister implements the VirtualIPRoutingLister interface.
type virtualIPRoutingLister struct {
	indexer cache.Indexer
}

// NewVirtualIPRoutingLister returns a new VirtualIPRoutingLister.
func NewVirtualIPRoutingLister(indexer cache.Indexer) VirtualIPRoutingLister {
	return &virtualIPRoutingLister{indexer: indexer}
}

// List lists all VirtualIPRoutings in the indexer.
func (s *virtualIPRoutingLister) List(selector labels.Selector) (ret []*networking.VirtualIPRouting, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*networking.VirtualIPRouting))
	})
	return ret, err
}

// VirtualIPRoutings returns an object that can list and get VirtualIPRoutings.
func (s *virtualIPRoutingLister) VirtualIPRoutings(namespace string) VirtualIPRoutingNamespaceLister {
	return virtualIPRoutingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualIPRoutingNamespaceLister helps list and get VirtualIPRoutings.
// All objects returned here must be treated as read-only.
type VirtualIPRoutingNamespaceLister interface {
	// List lists all VirtualIPRoutings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*networking.VirtualIPRouting, err error)
	// Get retrieves the VirtualIPRouting from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*networking.VirtualIPRouting, error)
	VirtualIPRoutingNamespaceListerExpansion
}

// virtualIPRoutingNamespaceLister implements the VirtualIPRoutingNamespaceLister
// interface.
type virtualIPRoutingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualIPRoutings in the indexer for a given namespace.
func (s virtualIPRoutingNamespaceLister) List(selector labels.Selector) (ret []*networking.VirtualIPRouting, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*networking.VirtualIPRouting))
	})
	return ret, err
}

// Get retrieves the VirtualIPRouting from the indexer for a given namespace and name.
func (s virtualIPRoutingNamespaceLister) Get(name string) (*networking.VirtualIPRouting, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(networking.Resource("virtualiprouting"), name)
	}
	return obj.(*networking.VirtualIPRouting), nil
}
