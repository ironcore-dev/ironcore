/*
 * Copyright (c) 2021 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/onmetal/onmetal-api/apis/networking/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AliasPrefixLister helps list AliasPrefixes.
// All objects returned here must be treated as read-only.
type AliasPrefixLister interface {
	// List lists all AliasPrefixes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AliasPrefix, err error)
	// AliasPrefixes returns an object that can list and get AliasPrefixes.
	AliasPrefixes(namespace string) AliasPrefixNamespaceLister
	AliasPrefixListerExpansion
}

// aliasPrefixLister implements the AliasPrefixLister interface.
type aliasPrefixLister struct {
	indexer cache.Indexer
}

// NewAliasPrefixLister returns a new AliasPrefixLister.
func NewAliasPrefixLister(indexer cache.Indexer) AliasPrefixLister {
	return &aliasPrefixLister{indexer: indexer}
}

// List lists all AliasPrefixes in the indexer.
func (s *aliasPrefixLister) List(selector labels.Selector) (ret []*v1alpha1.AliasPrefix, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AliasPrefix))
	})
	return ret, err
}

// AliasPrefixes returns an object that can list and get AliasPrefixes.
func (s *aliasPrefixLister) AliasPrefixes(namespace string) AliasPrefixNamespaceLister {
	return aliasPrefixNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AliasPrefixNamespaceLister helps list and get AliasPrefixes.
// All objects returned here must be treated as read-only.
type AliasPrefixNamespaceLister interface {
	// List lists all AliasPrefixes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AliasPrefix, err error)
	// Get retrieves the AliasPrefix from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AliasPrefix, error)
	AliasPrefixNamespaceListerExpansion
}

// aliasPrefixNamespaceLister implements the AliasPrefixNamespaceLister
// interface.
type aliasPrefixNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AliasPrefixes in the indexer for a given namespace.
func (s aliasPrefixNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AliasPrefix, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AliasPrefix))
	})
	return ret, err
}

// Get retrieves the AliasPrefix from the indexer for a given namespace and name.
func (s aliasPrefixNamespaceLister) Get(name string) (*v1alpha1.AliasPrefix, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aliasprefix"), name)
	}
	return obj.(*v1alpha1.AliasPrefix), nil
}
