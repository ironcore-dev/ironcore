/*
 * Copyright (c) 2021 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	storage "github.com/onmetal/onmetal-api/apis/storage"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VolumeClassLister helps list VolumeClasses.
// All objects returned here must be treated as read-only.
type VolumeClassLister interface {
	// List lists all VolumeClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storage.VolumeClass, err error)
	// Get retrieves the VolumeClass from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*storage.VolumeClass, error)
	VolumeClassListerExpansion
}

// volumeClassLister implements the VolumeClassLister interface.
type volumeClassLister struct {
	indexer cache.Indexer
}

// NewVolumeClassLister returns a new VolumeClassLister.
func NewVolumeClassLister(indexer cache.Indexer) VolumeClassLister {
	return &volumeClassLister{indexer: indexer}
}

// List lists all VolumeClasses in the indexer.
func (s *volumeClassLister) List(selector labels.Selector) (ret []*storage.VolumeClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*storage.VolumeClass))
	})
	return ret, err
}

// Get retrieves the VolumeClass from the index for a given name.
func (s *volumeClassLister) Get(name string) (*storage.VolumeClass, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(storage.Resource("volumeclass"), name)
	}
	return obj.(*storage.VolumeClass), nil
}
