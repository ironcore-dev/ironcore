/*
 * Copyright (c) 2021 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	ipam "github.com/onmetal/onmetal-api/apis/ipam"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClusterPrefixAllocations implements ClusterPrefixAllocationInterface
type FakeClusterPrefixAllocations struct {
	Fake *FakeIpam
}

var clusterprefixallocationsResource = schema.GroupVersionResource{Group: "ipam.api.onmetal.de", Version: "", Resource: "clusterprefixallocations"}

var clusterprefixallocationsKind = schema.GroupVersionKind{Group: "ipam.api.onmetal.de", Version: "", Kind: "ClusterPrefixAllocation"}

// Get takes name of the clusterPrefixAllocation, and returns the corresponding clusterPrefixAllocation object, and an error if there is any.
func (c *FakeClusterPrefixAllocations) Get(ctx context.Context, name string, options v1.GetOptions) (result *ipam.ClusterPrefixAllocation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clusterprefixallocationsResource, name), &ipam.ClusterPrefixAllocation{})
	if obj == nil {
		return nil, err
	}
	return obj.(*ipam.ClusterPrefixAllocation), err
}

// List takes label and field selectors, and returns the list of ClusterPrefixAllocations that match those selectors.
func (c *FakeClusterPrefixAllocations) List(ctx context.Context, opts v1.ListOptions) (result *ipam.ClusterPrefixAllocationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clusterprefixallocationsResource, clusterprefixallocationsKind, opts), &ipam.ClusterPrefixAllocationList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &ipam.ClusterPrefixAllocationList{ListMeta: obj.(*ipam.ClusterPrefixAllocationList).ListMeta}
	for _, item := range obj.(*ipam.ClusterPrefixAllocationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterPrefixAllocations.
func (c *FakeClusterPrefixAllocations) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(clusterprefixallocationsResource, opts))
}

// Create takes the representation of a clusterPrefixAllocation and creates it.  Returns the server's representation of the clusterPrefixAllocation, and an error, if there is any.
func (c *FakeClusterPrefixAllocations) Create(ctx context.Context, clusterPrefixAllocation *ipam.ClusterPrefixAllocation, opts v1.CreateOptions) (result *ipam.ClusterPrefixAllocation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(clusterprefixallocationsResource, clusterPrefixAllocation), &ipam.ClusterPrefixAllocation{})
	if obj == nil {
		return nil, err
	}
	return obj.(*ipam.ClusterPrefixAllocation), err
}

// Update takes the representation of a clusterPrefixAllocation and updates it. Returns the server's representation of the clusterPrefixAllocation, and an error, if there is any.
func (c *FakeClusterPrefixAllocations) Update(ctx context.Context, clusterPrefixAllocation *ipam.ClusterPrefixAllocation, opts v1.UpdateOptions) (result *ipam.ClusterPrefixAllocation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(clusterprefixallocationsResource, clusterPrefixAllocation), &ipam.ClusterPrefixAllocation{})
	if obj == nil {
		return nil, err
	}
	return obj.(*ipam.ClusterPrefixAllocation), err
}

// Delete takes name of the clusterPrefixAllocation and deletes it. Returns an error if one occurs.
func (c *FakeClusterPrefixAllocations) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(clusterprefixallocationsResource, name, opts), &ipam.ClusterPrefixAllocation{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterPrefixAllocations) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(clusterprefixallocationsResource, listOpts)

	_, err := c.Fake.Invokes(action, &ipam.ClusterPrefixAllocationList{})
	return err
}

// Patch applies the patch and returns the patched clusterPrefixAllocation.
func (c *FakeClusterPrefixAllocations) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *ipam.ClusterPrefixAllocation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(clusterprefixallocationsResource, name, pt, data, subresources...), &ipam.ClusterPrefixAllocation{})
	if obj == nil {
		return nil, err
	}
	return obj.(*ipam.ClusterPrefixAllocation), err
}
