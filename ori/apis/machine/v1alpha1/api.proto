syntax = "proto3";

package machine.v1alpha1;
option go_package = "github.com/onmetal/onmetal-api/ori/apis/machine/v1alpha1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/onmetal/onmetal-api/ori/apis/meta/v1alpha1/api.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

service MachineRuntime {
  rpc Version(VersionRequest) returns (VersionResponse) {};

  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse) {};
  rpc CreateMachine(CreateMachineRequest) returns (CreateMachineResponse) {};
  rpc DeleteMachine(DeleteMachineRequest) returns (DeleteMachineResponse) {};
  rpc UpdateMachineAnnotations(UpdateMachineAnnotationsRequest) returns (UpdateMachineAnnotationsResponse);
  rpc UpdateMachinePower(UpdateMachinePowerRequest) returns (UpdateMachinePowerResponse);
  rpc CreateVolumeAttachment(CreateVolumeAttachmentRequest) returns (CreateVolumeAttachmentResponse) {};
  rpc DeleteVolumeAttachment(DeleteVolumeAttachmentRequest) returns (DeleteVolumeAttachmentResponse) {};
  rpc CreateNetworkInterfaceAttachment(CreateNetworkInterfaceAttachmentRequest) returns (CreateNetworkInterfaceAttachmentResponse) {};
  rpc DeleteNetworkInterfaceAttachment(DeleteNetworkInterfaceAttachmentRequest) returns (DeleteNetworkInterfaceAttachmentResponse) {};

  rpc ListVolumes(ListVolumesRequest) returns (ListVolumesResponse) {};
  rpc CreateVolume(CreateVolumeRequest) returns (CreateVolumeResponse) {};
  rpc DeleteVolume(DeleteVolumeRequest) returns (DeleteVolumeResponse) {};

  rpc ListNetworkInterfaces(ListNetworkInterfacesRequest) returns (ListNetworkInterfacesResponse);
  rpc CreateNetworkInterface(CreateNetworkInterfaceRequest) returns (CreateNetworkInterfaceResponse);
  rpc DeleteNetworkInterface(DeleteNetworkInterfaceRequest) returns (DeleteNetworkInterfaceResponse);

  rpc UpdateNetworkInterfaceIPs(UpdateNetworkInterfaceIPsRequest) returns (UpdateNetworkInterfaceIPsResponse);

  rpc CreateNetworkInterfaceVirtualIP(CreateNetworkInterfaceVirtualIPRequest) returns (CreateNetworkInterfaceVirtualIPResponse);
  rpc UpdateNetworkInterfaceVirtualIP(UpdateNetworkInterfaceVirtualIPRequest) returns (UpdateNetworkInterfaceVirtualIPResponse);
  rpc DeleteNetworkInterfaceVirtualIP(DeleteNetworkInterfaceVirtualIPRequest) returns (DeleteNetworkInterfaceVirtualIPResponse);

  rpc CreateNetworkInterfacePrefix(CreateNetworkInterfacePrefixRequest) returns (CreateNetworkInterfacePrefixResponse);
  rpc DeleteNetworkInterfacePrefix(DeleteNetworkInterfacePrefixRequest) returns (DeleteNetworkInterfacePrefixResponse);

  rpc CreateNetworkInterfaceLoadBalancerTarget(CreateNetworkInterfaceLoadBalancerTargetRequest) returns (CreateNetworkInterfaceLoadBalancerTargetResponse);
  rpc DeleteNetworkInterfaceLoadBalancerTarget(DeleteNetworkInterfaceLoadBalancerTargetRequest) returns (DeleteNetworkInterfaceLoadBalancerTargetResponse);

  rpc CreateNetworkInterfaceNAT(CreateNetworkInterfaceNATRequest) returns (CreateNetworkInterfaceNATResponse);
  rpc DeleteNetworkInterfaceNAT(DeleteNetworkInterfaceNATRequest) returns (DeleteNetworkInterfaceNATResponse);

  rpc ListMachineClasses(ListMachineClassesRequest) returns (ListMachineClassesResponse);
}

message VolumeFilter {
  string id = 1;
  map<string, string> label_selector = 2;
}

message VolumeSpec {
  string driver = 1;
  string handle = 2;
  map<string, string> attributes = 3;
  map<string, bytes> secret_data = 4;
}

message Volume {
  meta.v1alpha1.ObjectMetadata metadata = 1;
  VolumeSpec spec = 2;
}

message NetworkInterfaceFilter {
  string id = 1;
  map<string, string> label_selector = 2;
}

message NetworkSpec {
  string handle = 1;
}

message VirtualIPSpec {
  string ip = 1;
}

message NATSpec {
  string ip = 1;
  int32 port = 2;
  int32 endPort = 3;
}

enum Protocol {
  TCP = 0;
  UDP = 1;
  SCTP = 2;
}

message LoadBalancerPort {
  Protocol protocol = 1;
  int32 port = 2;
  int32 endPort = 3;
}

message LoadBalancerTargetSpec {
  string ip = 1;
  repeated LoadBalancerPort ports = 2;
}

message NetworkInterfaceSpec {
  NetworkSpec network = 1;
  repeated string ips = 2;
  VirtualIPSpec virtual_ip = 3;
  repeated string prefixes = 4;
  repeated LoadBalancerTargetSpec load_balancer_targets = 5;
  repeated NATSpec nats = 6;
}

message NetworkInterface {
  meta.v1alpha1.ObjectMetadata metadata = 1;
  NetworkInterfaceSpec spec = 2;
}

message IgnitionSpec {
  bytes data = 1;
}

message MachineFilter {
  string id = 1;
  map<string, string> label_selector = 2;
}

message MachineClassCapabilities {
  int64 cpu_millis = 1;
  uint64 memory_bytes = 2;
}

message Machine {
  meta.v1alpha1.ObjectMetadata metadata = 1;
  MachineSpec spec = 2;
  MachineStatus status = 3;
}

message ImageSpec {
  string image = 1;
}

message EmptyDiskSpec {
  uint64 size_bytes = 1;
}

message VolumeAttachment {
  string name = 1;
  string device = 2;
  string volume_id = 3;
  EmptyDiskSpec empty_disk = 4;
}

message NetworkInterfaceAttachment {
  string name = 1;
  string network_interface_id = 2;
}

enum Power {
  POWER_ON = 0;
  POWER_OFF = 1;
}

message MachineSpec {
  Power power = 1;
  ImageSpec image = 2;
  string class = 3;
  IgnitionSpec ignition = 4;
  repeated VolumeAttachment volumes = 5;
  repeated NetworkInterfaceAttachment network_interfaces = 6;
}

message MachineStatus {
  int64 observed_generation = 1;
  MachineState state = 2;
  string image_ref = 3;
  repeated VolumeAttachmentStatus volumes = 4;
  repeated NetworkInterfaceAttachmentStatus network_interfaces = 5;
}

message VolumeAttachmentStatus {
  string name = 1;
  string volume_handle = 2;
  VolumeAttachmentState state = 3;
}

enum VolumeAttachmentState {
  VOLUME_ATTACHMENT_PENDING = 0;
  VOLUME_ATTACHMENT_ATTACHED = 1;
  VOLUME_ATTACHMENT_DETACHED = 2;
}

message NetworkInterfaceAttachmentStatus {
  string name = 1;
  string network_interface_handle = 2;
  NetworkInterfaceAttachmentState state = 3;
}

enum NetworkInterfaceAttachmentState {
  NETWORK_INTERFACE_ATTACHMENT_PENDING = 0;
  NETWORK_INTERFACE_ATTACHMENT_ATTACHED = 1;
  NETWORK_INTERFACE_ATTACHMENT_DETACHED = 2;
}

enum MachineState {
  MACHINE_PENDING = 0;
  MACHINE_RUNNING = 1;
  MACHINE_SUSPENDED = 2;
  MACHINE_TERMINATED = 3;
}

message MachineClass {
  string name = 1;
  MachineClassCapabilities capabilities = 2;
}

message VersionRequest {
  string version = 1;
}

message VersionResponse {
  // Name of the machine runtime.
  string runtime_name = 1;
  // Version of the machine runtime. The string must be
  // semver-compatible.
  string runtime_version = 2;
}

message ListMachinesRequest {
  MachineFilter filter = 1;
}

message ListMachinesResponse {
  repeated Machine machines = 1;
}

message CreateMachineRequest {
  Machine machine = 1;
}

message CreateMachineResponse {
  Machine machine = 1;
}

message DeleteMachineRequest {
  string machine_id = 1;
}

message DeleteMachineResponse {
}

message UpdateMachineAnnotationsRequest {
  string machine_id = 1;
  map<string, string> annotations = 2;
}

message UpdateMachineAnnotationsResponse {
}

message UpdateMachinePowerRequest {
  string machine_id = 1;
  Power power = 2;
}

message UpdateMachinePowerResponse {
}

message CreateVolumeAttachmentRequest {
  string machine_id = 1;
  VolumeAttachment volume = 2;
}

message CreateVolumeAttachmentResponse {
}

message DeleteVolumeAttachmentRequest {
  string machine_id = 1;
  string name = 2;
}

message DeleteVolumeAttachmentResponse {
}

message CreateNetworkInterfaceAttachmentRequest {
  string machine_id = 1;
  NetworkInterfaceAttachment network_interface = 2;
}

message CreateNetworkInterfaceAttachmentResponse {
}

message DeleteNetworkInterfaceAttachmentRequest {
  string machine_id = 1;
  string name = 2;
}

message DeleteNetworkInterfaceAttachmentResponse {
}

message ListVolumesRequest {
  VolumeFilter filter = 1;
}

message ListVolumesResponse {
  repeated Volume volumes = 1;
}

message CreateVolumeRequest {
  Volume volume = 1;
}

message CreateVolumeResponse {
  Volume volume = 1;
}

message DeleteVolumeRequest {
  string volume_id = 1;
}

message DeleteVolumeResponse {
}

message ListNetworkInterfacesRequest {
  NetworkInterfaceFilter filter = 1;
}

message ListNetworkInterfacesResponse {
  repeated NetworkInterface network_interfaces = 1;
}

message CreateNetworkInterfaceRequest {
  NetworkInterface network_interface = 1;
}

message CreateNetworkInterfaceResponse {
  NetworkInterface network_interface = 1;
}

message DeleteNetworkInterfaceRequest {
  string network_interface_id = 1;
}

message DeleteNetworkInterfaceResponse {
}

message UpdateNetworkInterfaceIPsRequest {
  string network_interface_id = 1;
  repeated string ips = 2;
}

message UpdateNetworkInterfaceIPsResponse {
}

message CreateNetworkInterfaceVirtualIPRequest {
  string network_interface_id = 1;
  VirtualIPSpec virtual_ip = 2;
}

message CreateNetworkInterfaceVirtualIPResponse {
}

message UpdateNetworkInterfaceVirtualIPRequest {
  string network_interface_id = 1;
  VirtualIPSpec virtual_ip = 2;
}

message UpdateNetworkInterfaceVirtualIPResponse {
}

message CreateNetworkInterfacePrefixRequest {
  string network_interface_id = 1;
  string prefix = 2;
}

message CreateNetworkInterfacePrefixResponse {
}

message DeleteNetworkInterfacePrefixRequest {
  string network_interface_id = 1;
  string prefix = 2;
}

message DeleteNetworkInterfacePrefixResponse {
}

message CreateNetworkInterfaceLoadBalancerTargetRequest {
  string network_interface_id = 1;
  LoadBalancerTargetSpec load_balancer_target = 2;
}

message CreateNetworkInterfaceLoadBalancerTargetResponse {
}

message DeleteNetworkInterfaceLoadBalancerTargetRequest {
  string network_interface_id = 1;
  LoadBalancerTargetSpec load_balancer_target = 2;
}

message DeleteNetworkInterfaceLoadBalancerTargetResponse {
}

message CreateNetworkInterfaceNATRequest {
  string network_interface_id = 1;
  NATSpec nat = 2;
}

message CreateNetworkInterfaceNATResponse {
}

message DeleteNetworkInterfaceNATRequest {
  string network_interface_id = 1;
  string nat_ip = 2;
}

message DeleteNetworkInterfaceNATResponse {
}

message DeleteNetworkInterfaceVirtualIPRequest {
  string network_interface_id = 1;
}

message DeleteNetworkInterfaceVirtualIPResponse {
}

message ListMachineClassesRequest {
}

message ListMachineClassesResponse {
  repeated MachineClass machine_classes = 1;
}
