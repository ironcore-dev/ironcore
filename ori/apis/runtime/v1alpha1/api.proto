syntax = "proto3";

package runtime.v1alpha1;
option go_package = "ori/apis/runtime/v1alpha1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

service MachineRuntime {
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse) {};
  rpc CreateMachine(CreateMachineRequest) returns (CreateMachineResponse) {};
  rpc MachineStatus(MachineStatusRequest) returns (MachineStatusResponse) {};
  rpc DeleteMachine(DeleteMachineRequest) returns (DeleteMachineResponse) {};

  rpc ListVolumes(ListVolumesRequest) returns (ListVolumesResponse) {};
  rpc CreateVolume(CreateVolumeRequest) returns (CreateVolumeResponse) {};
  rpc DeleteVolume(DeleteVolumeRequest) returns (DeleteVolumeResponse) {};

  rpc ListNetworkInterfaces(ListNetworkInterfacesRequest) returns (ListNetworkInterfacesResponse);
  rpc CreateNetworkInterface(CreateNetworkInterfaceRequest) returns (CreateNetworkInterfaceResponse);
  rpc UpdateNetworkInterface(UpdateNetworkInterfaceRequest) returns (UpdateNetworkInterfaceResponse);
  rpc DeleteNetworkInterface(DeleteNetworkInterfaceRequest) returns (DeleteNetworkInterfaceResponse);
}

message VolumeFilter {
  // ID of the machine.
  string machine_id = 1;
}

message VolumeAccessConfig {
  string driver = 1;
  string handle = 2;
  map<string, string> attributes = 3;
  map<string, bytes> secret_data = 4;
}

message EmptyDiskConfig {
  uint64 size_limit_bytes = 1;
}

message Volume {
  string machine_id = 1;
  MachineMetadata machine_metadata = 2;
  string name = 3;
  string device = 4;
  VolumeAccess access = 5;
  EmptyDisk empty_disk = 6;
}

message VolumeAccess {
  string driver = 1;
  string handle = 2;
}

message EmptyDisk {
  uint64 size_limit_bytes = 1;
}

message VolumeConfig {
  string name = 1;
  string device = 2;
  VolumeAccessConfig access = 3;
  EmptyDiskConfig empty_disk = 4;
}

message NetworkInterfaceFilter {
  // ID of the machine.
  string machine_id = 1;
}

message NetworkConfig {
  string handle = 1;
}

message VirtualIPConfig {
  string ip = 1;
}

message NetworkInterfaceConfig {
  string name = 1;
  NetworkConfig network = 2;
  repeated string ips = 3;
  VirtualIPConfig virtual_ip = 4;
}

message NetworkInterface {
  string machine_id = 1;
  MachineMetadata machine_metadata = 2;
  string name = 3;
  NetworkConfig network = 4;
  repeated string ips = 5;
  VirtualIPConfig virtual_ip = 6;
}

message IgnitionConfig {
  bytes data = 1;
}

message MachineFilter {
  string id = 1;
  map<string, string> label_selector = 2;
}

message MachineMetadata {
  string namespace = 1;
  string name = 2;
  string uid = 3;
}

message MachineResources {
  int32 cpu_count = 1;
  uint64 memory_bytes = 2;
}

message MachineConfig {
  MachineMetadata metadata = 1;
  string image = 2;
  MachineResources resources = 3;
  IgnitionConfig ignition = 4;
  repeated VolumeConfig volumes = 5;
  repeated NetworkInterfaceConfig network_interfaces = 6;
  map<string, string> annotations = 7;
  map<string, string> labels = 8;
}

message Machine {
  string id = 1;
  MachineMetadata metadata = 2;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;
}

message VolumeAccessStatus {
  string driver = 1;
  string handle = 2;
}

message EmptyDiskStatus {
  uint64 size_bytes = 1;
}

enum VolumeState {
  VOLUME_PENDING = 0;
  VOLUME_ATTACHED = 1;
  VOLUME_DETACHED = 2;
  VOLUME_ERROR = 3;
}

message VolumeStatus {
  string name = 1;
  string device = 2;
  VolumeState state = 3;
  VolumeAccessStatus access = 4;
  EmptyDiskStatus empty_disk = 5;
}

message NetworkStatus {
  string handle = 1;
}

message VirtualIPStatus {
  string ip = 1;
}

message NetworkInterfaceStatus {
  string name = 1;
  NetworkStatus network = 2;
  repeated string ips = 3;
  VirtualIPStatus virtual_ip = 4;
  NetworkInterfaceState state = 5;
}

enum NetworkInterfaceState {
  NETWORK_INTERFACE_PENDING = 0;
  NETWORK_INTERFACE_ATTACHED = 1;
  NETWORK_INTERFACE_DETACHED = 2;
  NETWORK_INTERFACE_ERROR = 3;
}

enum MachineState {
  MACHINE_PENDING = 0;
  MACHINE_RUNNING = 1;
  MACHINE_SHUTDOWN = 2;
  MACHINE_ERROR = 3;
  MACHINE_UNKNOWN = 4;
}

message MachineStatus {
  string id = 1;
  MachineMetadata metadata = 2;
  string image = 3;
  string image_ref = 4;
  MachineState state = 5;
  repeated VolumeStatus volumes = 6;
  repeated NetworkInterfaceStatus network_interfaces = 7;
  map<string, string> annotations = 8;
  map<string, string> labels = 9;
}

message ListMachinesRequest {
  MachineFilter filter = 1;
}

message ListMachinesResponse {
  repeated Machine machines = 1;
}

message CreateMachineRequest {
  MachineConfig config = 1;
}

message CreateMachineResponse {
  Machine machine = 1;
}

message MachineStatusRequest {
  string machine_id = 1;
}

message MachineStatusResponse {
  MachineStatus status = 1;
}

message DeleteMachineRequest {
  string machine_id = 1;
}

message DeleteMachineResponse {
}

message ListVolumesRequest {
  VolumeFilter filter = 1;
}

message ListVolumesResponse {
  repeated Volume volumes = 1;
}

message CreateVolumeRequest {
  string machine_id = 1;
  VolumeConfig config = 2;
}

message CreateVolumeResponse {
}

message DeleteVolumeRequest {
  string machine_id = 1;
  string volume_name = 2;
}

message DeleteVolumeResponse {
}

message ListNetworkInterfacesRequest {
  NetworkInterfaceFilter filter = 1;
}

message ListNetworkInterfacesResponse {
  repeated NetworkInterface network_interfaces = 1;
}

message CreateNetworkInterfaceRequest {
  string machine_id = 1;
  NetworkInterfaceConfig config = 2;
}

message CreateNetworkInterfaceResponse {
}

message UpdateNetworkInterfaceRequest {
  string machine_id = 1;
  string network_interface_name = 2;
  repeated string ips = 3;
  VirtualIPConfig virtual_ip = 4;
}

message UpdateNetworkInterfaceResponse {
}

message DeleteNetworkInterfaceRequest {
  string machine_id = 1;
  string network_interface_name = 2;
}

message DeleteNetworkInterfaceResponse {
}
